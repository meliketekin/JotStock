{"version":3,"file":"SentryCli.js","sourceRoot":"","sources":["../../../lib/Helper/SentryCli.ts"],"names":[],"mappings":";;;AACA,0BAA4B;AAC5B,2BAA6B;AAU7B;IAIE,mBAAsB,KAAW;QAAX,UAAK,GAAL,KAAK,CAAM;QAHjC,sDAAsD;QAC9C,aAAQ,GAAG,OAAO,CAAC,OAAO,CAAC;IAEC,CAAC;IAE9B,sCAAkB,GAAzB,UAA0B,OAAiC;QACzD,IAAI,CAAC,QAAQ,GAAG,OAAc,CAAC;IACjC,CAAC;IAEM,8CAA0B,GAAjC,UAAkC,OAAgB;QAChD,IAAM,KAAK,GAAmB,EAAE,CAAC;QACjC,KAAK,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;QACvC,KAAK,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,0BAA0B,EAAE,IAAI,CAAC,CAAC;QACzE,KAAK,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,qBAAqB,EAAE,IAAI,CAAC,CAAC;QACxE,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,mBAAmB,EAAE,IAAI,CAAC,CAAC;QAChE,IAAI;YACF,IAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,4BAA4B,CAAC,CAAC;YAC5D,KAAK,CAAC,gBAAgB,CAAC,GAAG,IAAI;iBAC3B,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,OAAO,CAAC;iBAChC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;SAC3B;QAAC,OAAO,CAAC,EAAE;YACV,6CAA6C;SAC9C;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,wDAAwD;IACjD,kCAAc,GAArB,UAAsB,KAAqB;QACzC,IAAM,EAAE,GAAG,EAAE,CAAC;QACd,KAAK,IAAI,GAAG,IAAI,KAAK,EAAE;YACrB,iDAAiD;YACjD,IAAI,KAAK,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;gBAC7B,IAAM,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;gBACzB,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;gBAC9B,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,EAAE;oBACzC,kDAAkD;oBAClD,EAAE,CAAC,IAAI,CAAC,MAAI,GAAG,MAAG,CAAC,CAAC;iBACrB;qBAAM;oBACL,EAAE,CAAC,IAAI,CAAI,GAAG,SAAI,KAAO,CAAC,CAAC;iBAC5B;aACF;SACF;QACD,2CAA2C;QAC3C,OAAO,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;IAC9B,CAAC;IAEM,8BAAU,GAAjB,UAAkB,MAAuB;QACvC,IAAM,cAAc,GAAa,EAAE,CAAC;QACpC,KAAK,IAAM,WAAW,IAAI,MAAM,EAAE;YAChC,iDAAiD;YACjD,IAAI,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE;gBACtC,IAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;gBACvD,IAAM,OAAO,GAAG,MAAI,WAAW,WAAM,KAAO,CAAC;gBAC7C,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aAC9B;SACF;QACD,OAAO,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IACH,gBAAC;AAAD,CAAC,AA3DD,IA2DC;AA3DY,8BAAS","sourcesContent":["import { Answers } from 'inquirer';\nimport * as _ from 'lodash';\nimport * as path from 'path';\n\nimport { Args } from '../Constants';\n\nexport interface SentryCliProps {\n  [s: string]: string;\n}\n\ntype SentryCliConfig = Record<string, SentryCliProps>;\n\nexport class SentryCli {\n  // eslint-disable-next-line @typescript-eslint/typedef\n  private _resolve = require.resolve;\n\n  constructor(protected _argv: Args) {}\n\n  public setResolveFunction(resolve: (path: string) => string): void {\n    this._resolve = resolve as any;\n  }\n\n  public convertAnswersToProperties(answers: Answers): SentryCliProps {\n    const props: SentryCliProps = {};\n    props['defaults/url'] = this._argv.url;\n    props['defaults/org'] = _.get(answers, 'config.organization.slug', null);\n    props['defaults/project'] = _.get(answers, 'config.project.slug', null);\n    props['auth/token'] = _.get(answers, 'config.auth.token', null);\n    try {\n      const cliPath = this._resolve('@sentry/cli/bin/sentry-cli');\n      props['cli/executable'] = path\n        .relative(process.cwd(), cliPath)\n        .replace(/\\\\/g, '\\\\\\\\');\n    } catch (e) {\n      // we do nothing and leave everyting as it is\n    }\n    return props;\n  }\n\n  /** Create the contents of a `sentry.properties` file */\n  public dumpProperties(props: SentryCliProps): string {\n    const rv = [];\n    for (let key in props) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (props.hasOwnProperty(key)) {\n        const value = props[key];\n        key = key.replace(/\\//g, '.');\n        if (value === undefined || value === null) {\n          // comment that property out since it has no value\n          rv.push(`#${key}=`);\n        } else {\n          rv.push(`${key}=${value}`);\n        }\n      }\n    }\n    // eslint-disable-next-line prefer-template\n    return rv.join('\\n') + '\\n';\n  }\n\n  public dumpConfig(config: SentryCliConfig): string {\n    const dumpedSections: string[] = [];\n    for (const sectionName in config) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (config.hasOwnProperty(sectionName)) {\n        const props = this.dumpProperties(config[sectionName]);\n        const section = `[${sectionName}]\\n${props}`;\n        dumpedSections.push(section);\n      }\n    }\n    return dumpedSections.join('\\n');\n  }\n}\n"]}