{"version":3,"file":"WaitForSentry.js","sourceRoot":"","sources":["../../../lib/Steps/WaitForSentry.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,iDAAgD;AAChD,2CAAyD;AACzD,uCAAsC;AAEtC,IAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AAEzB;IAAmC,iCAAQ;IAA3C;;IAyCA,CAAC;IAxCc,4BAAI,GAAjB,UAAkB,OAAgB;;;;;4BAC1B,qBAAM,8BAAqB,CAAC,OAAO,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,EAAA;;wBAA9D,IAAI,CAAC,CAAC,SAAwD,CAAC,EAAE;4BAC/D,sBAAO,EAAE,EAAC;yBACX;wBACD,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE;4BAC1B,sBAAO,EAAE,EAAC;yBACX;wBAED,qDAAqD;wBACrD,sBAAO,IAAI,OAAO,CAAC,UAAO,OAAO,EAAE,OAAO;;;;oCACxC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;oCAEpB,qBAAS,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;oCAClC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;oCAEzB,OAAO,GAAG;;;;;;oDAEZ,IAAI,CAAC,KAAK,CAAC,cAAY,OAAO,qBAAgB,OAAO,CAAC,IAAI,MAAG,CAAC,CAAC;oDAC9C,qBAAM,EAAE,CAAC,GAAG,CACxB,OAAO,qBAAgB,OAAO,CAAC,IAAI,MAAG,CAC1C,CAAC,QAAQ,EAAA;;oDAFJ,QAAQ,GAAG,SAEP;oDACV,IAAI,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC;oDACpC,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE;wDAC3B,MAAM,IAAI,KAAK,CAAC,qBAAmB,QAAQ,CAAC,MAAQ,CAAC,CAAC;qDACvD;oDACY,qBAAM,QAAQ,CAAC,IAAI,EAAE,EAAA;;oDAA5B,IAAI,GAAG,SAAqB;oDAClC,8DAA8D;oDAC9D,qBAAM,EAAE,CAAC,MAAM,CAAI,OAAO,qBAAgB,OAAO,CAAC,IAAI,MAAG,CAAC,EAAA;;oDAD1D,8DAA8D;oDAC9D,SAA0D,CAAC;oDAC3D,qBAAS,CAAC,IAAI,EAAE,CAAC;oDACjB,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;oDAC/B,OAAO,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;;;;oDAE1B,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;oDAChC,IAAI,CAAC,KAAK,CAAC,GAAC,CAAC,CAAC;oDACd,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;;;;;yCAExC,CAAC;oCACF,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;;;iCACtB,CAAC,EAAC;;;;KACJ;IACH,oBAAC;AAAD,CAAC,AAzCD,CAAmC,mBAAQ,GAyC1C;AAzCY,sCAAa","sourcesContent":["import { Answers } from 'inquirer';\n\nimport { BottomBar } from '../Helper/BottomBar';\nimport { getCurrentIntegration } from '../Helper/Wizard';\nimport { BaseStep } from './BaseStep';\n\nconst r2 = require('r2');\n\nexport class WaitForSentry extends BaseStep {\n  public async emit(answers: Answers): Promise<Answers> {\n    if (!(await getCurrentIntegration(answers).shouldEmit(answers))) {\n      return {};\n    }\n    if (this._argv.skipConnect) {\n      return {};\n    }\n\n    // eslint-disable-next-line no-async-promise-executor\n    return new Promise(async (resolve, _reject) => {\n      this.debug(answers);\n\n      BottomBar.show('Waiting for Sentry...');\n      const baseUrl = this._argv.url;\n\n      const polling = async (): Promise<void> => {\n        try {\n          this.debug(`Polling: ${baseUrl}api/0/wizard/${answers.hash}/`);\n          const response = await r2.get(\n            `${baseUrl}api/0/wizard/${answers.hash}/`,\n          ).response;\n          this.debug(`Polling received data`);\n          if (response.status !== 200) {\n            throw new Error(`Received status ${response.status}`);\n          }\n          const data = await response.json();\n          // Delete the wizard hash since we were able to fetch the data\n          await r2.delete(`${baseUrl}api/0/wizard/${answers.hash}/`);\n          BottomBar.hide();\n          this.debug(`Polling Success!`);\n          resolve({ wizard: data });\n        } catch (e) {\n          this.debug('Polling received:');\n          this.debug(e);\n          setTimeout(polling.bind(this), 1000);\n        }\n      };\n      polling.bind(this)();\n    });\n  }\n}\n"]}