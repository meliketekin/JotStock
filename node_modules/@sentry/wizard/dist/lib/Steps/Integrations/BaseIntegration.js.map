{"version":3,"file":"BaseIntegration.js","sourceRoot":"","sources":["../../../../lib/Steps/Integrations/BaseIntegration.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,0BAA4B;AAG5B,wCAAuC;AAEvC;IAA8C,mCAAQ;IAIpD,yBAAsB,KAAW;QAAjC,YACE,kBAAM,KAAK,CAAC,SAGb;QAJqB,WAAK,GAAL,KAAK,CAAM;QAE/B,kEAAkE;QAClE,KAAI,CAAC,IAAI,GAAG,KAAI,CAAC,SAAS,CAAC;;IAC7B,CAAC;IAEY,mCAAS,GAAtB,UAAuB,QAAiB;;;gBACtC,sBAAO,EAAE,EAAC;;;KACX;IAED;;;;OAIG;IACU,yCAAe,GAA5B,UAA6B,QAAiB;;;gBAC5C,IAAI,IAAI,CAAC,gBAAgB,EAAE;oBACzB,sBAAO,IAAI,CAAC,gBAAgB,EAAC;iBAC9B;gBACD,IAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;gBAC5D,sBAAO,IAAI,CAAC,gBAAgB,EAAC;;;KAC9B;IAEY,oCAAU,GAAvB,UAAwB,QAAiB;;;;;;wBAErC,KAAA,CAAA,KAAA,CAAC,CAAA,CAAC,IAAI,CAAA;wBACJ,KAAA,CAAA,KAAA,CAAC,CAAA,CAAC,MAAM,CAAA;wBACN,qBAAM,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,EAAA;4BAH1C,sBAAO,CACL,cACE,cACE,SAAoC;gCACpC,UAAC,MAAe,IAAK,OAAA,MAAM,EAAN,CAAM,EAC5B,EACF,CAAC,MAAM,GAAG,CAAC,CACb,EAAC;;;;KACH;IAGH,sBAAC;AAAD,CAAC,AAvCD,CAA8C,mBAAQ,GAuCrD;AAvCqB,0CAAe","sourcesContent":["import { Answers } from 'inquirer';\nimport * as _ from 'lodash';\n\nimport { Args } from '../../Constants';\nimport { BaseStep } from '../BaseStep';\n\nexport abstract class BaseIntegration extends BaseStep {\n  public type: string;\n  protected _shouldConfigure: Promise<Answers>;\n\n  constructor(protected _argv: Args) {\n    super(_argv);\n    // @ts-ignore property construct does not exist on BaseIntegration\n    this.type = this.construct;\n  }\n\n  public async uninstall(_answers: Answers): Promise<Answers> {\n    return {};\n  }\n\n  /**\n   * This can be used for example for platform:boolean to determine\n   * if we should configure iOS/Android.\n   * Basically this will be merged into answers so it can be checked by a later step.\n   */\n  public async shouldConfigure(_answers: Answers): Promise<Answers> {\n    if (this._shouldConfigure) {\n      return this._shouldConfigure;\n    }\n    this._shouldConfigure = Promise.resolve({ platform: true });\n    return this._shouldConfigure;\n  }\n\n  public async shouldEmit(_answers: Answers): Promise<boolean> {\n    return (\n      _.keys(\n        _.pickBy(\n          await this.shouldConfigure(_answers),\n          (active: boolean) => active,\n        ),\n      ).length > 0\n    );\n  }\n\n  public abstract emit(answers: Answers): Promise<Answers>;\n}\n"]}