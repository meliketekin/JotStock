{"version":3,"file":"ChooseIntegration.js","sourceRoot":"","sources":["../../../lib/Steps/ChooseIntegration.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qCAA2C;AAC3C,0BAA4B;AAE5B,0CAAkE;AAClE,uCAAsC;AACtC,kDAAiD;AACjD,oDAAmD;AACnD,gDAA+C;AAC/C,0DAAyD;AAEzD,IAAI,cAAc,GAAQ,EAAE,CAAC;AAE7B,IAAI;IACF,qCAAqC;IACrC,cAAc,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;CAChD;AAAC,WAAM;IACN,cAAc,GAAG,OAAO,CAAI,OAAO,CAAC,GAAG,EAAE,kBAAe,CAAC,CAAC;CAC3D;AAED;IAAuC,qCAAQ;IAA/C;;IAqDA,CAAC;IApDc,gCAAI,GAAjB,UAAkB,QAAiB;;;;;;wBAE7B,iBAAiB,GAAQ,IAAI,CAAC;6BAC9B,IAAI,CAAC,KAAK,CAAC,WAAW,EAAtB,wBAAsB;wBACxB,iBAAiB,GAAG,EAAE,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;;;wBAE5D,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE;4BACpB,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;yBACrD;wBACD,iBAAiB,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC;wBAC/B,qBAAM,iBAAM,CAAC;gCAC/B;oCACE,OAAO,EAAE,iCAAqB,EAAE;oCAChC,OAAO,EAAE,iBAAiB;oCAC1B,OAAO,EAAE,yCAAyC;oCAClD,IAAI,EAAE,aAAa;oCACnB,IAAI,EAAE,MAAM;iCACb;6BACF,CAAC,EAAA;;wBARF,iBAAiB,GAAG,SAQlB,CAAC;;;wBAGD,WAAW,GAAG,IAAI,CAAC;wBACvB,QAAQ,iBAAiB,CAAC,WAAW,EAAE;4BACrC,KAAK,uBAAW,CAAC,WAAW;gCAC1B,WAAW,GAAG,IAAI,yBAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gCAC1C,MAAM;4BACR,KAAK,uBAAW,CAAC,OAAO;gCACtB,WAAW,GAAG,IAAI,iBAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gCACtC,MAAM;4BACR,KAAK,uBAAW,CAAC,QAAQ;gCACvB,WAAW,GAAG,IAAI,mBAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gCACvC,MAAM;4BACR,KAAK,uBAAW,CAAC,MAAM;gCACrB,WAAW,GAAG,IAAI,eAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gCACrC,MAAM;4BACR;gCACE,WAAW,GAAG,IAAI,yBAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gCAC1C,MAAM;yBACT;wBAED,sBAAO,EAAE,WAAW,aAAA,EAAE,EAAC;;;;KACxB;IAEM,mDAAuB,GAA9B;QACE,IAAI,CAAC,CAAC,GAAG,CAAC,cAAc,EAAE,2BAA2B,CAAC,EAAE;YACtD,OAAO,uBAAW,CAAC,WAAW,CAAC;SAChC;QACD,IAAI,CAAC,CAAC,GAAG,CAAC,cAAc,EAAE,sBAAsB,CAAC,EAAE;YACjD,OAAO,uBAAW,CAAC,OAAO,CAAC;SAC5B;QACD,OAAO;IACT,CAAC;IACH,wBAAC;AAAD,CAAC,AArDD,CAAuC,mBAAQ,GAqD9C;AArDY,8CAAiB","sourcesContent":["import { Answers, prompt } from 'inquirer';\nimport * as _ from 'lodash';\n\nimport { getIntegrationChoices, Integration } from '../Constants';\nimport { BaseStep } from './BaseStep';\nimport { Cordova } from './Integrations/Cordova';\nimport { Electron } from './Integrations/Electron';\nimport { NextJs } from './Integrations/NextJs';\nimport { ReactNative } from './Integrations/ReactNative';\n\nlet projectPackage: any = {};\n\ntry {\n  // If we run directly in setup-wizard\n  projectPackage = require('../../package.json');\n} catch {\n  projectPackage = require(`${process.cwd()}/package.json`);\n}\n\nexport class ChooseIntegration extends BaseStep {\n  public async emit(_answers: Answers): Promise<Answers> {\n    // If we receive project type as an arg we skip asking\n    let integrationPrompt: any = null;\n    if (this._argv.integration) {\n      integrationPrompt = { integration: this._argv.integration };\n    } else {\n      if (this._argv.quiet) {\n        throw new Error('You need to choose a integration');\n      }\n      integrationPrompt = this.tryDetectingIntegration();\n      integrationPrompt = await prompt([\n        {\n          choices: getIntegrationChoices(),\n          default: integrationPrompt,\n          message: 'What integration do you want to set up?',\n          name: 'integration',\n          type: 'list',\n        },\n      ]);\n    }\n\n    let integration = null;\n    switch (integrationPrompt.integration) {\n      case Integration.reactNative:\n        integration = new ReactNative(this._argv);\n        break;\n      case Integration.cordova:\n        integration = new Cordova(this._argv);\n        break;\n      case Integration.electron:\n        integration = new Electron(this._argv);\n        break;\n      case Integration.nextjs:\n        integration = new NextJs(this._argv);\n        break;\n      default:\n        integration = new ReactNative(this._argv);\n        break;\n    }\n\n    return { integration };\n  }\n\n  public tryDetectingIntegration(): Integration | undefined {\n    if (_.has(projectPackage, 'dependencies.react-native')) {\n      return Integration.reactNative;\n    }\n    if (_.has(projectPackage, 'dependencies.cordova')) {\n      return Integration.cordova;\n    }\n    return;\n  }\n}\n"]}