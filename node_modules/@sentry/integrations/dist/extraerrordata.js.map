{"version":3,"file":"extraerrordata.js","sourceRoot":"","sources":["../src/extraerrordata.ts"],"names":[],"mappings":"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","sourcesContent":["import { Event, EventHint, EventProcessor, ExtendedError, Hub, Integration } from '@sentry/types';\nimport { isDebugBuild, isError, isPlainObject, logger, normalize } from '@sentry/utils';\n\n/** JSDoc */\ninterface ExtraErrorDataOptions {\n  depth?: number;\n}\n\n/** Patch toString calls to return proper name for wrapped functions */\nexport class ExtraErrorData implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'ExtraErrorData';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = ExtraErrorData.id;\n\n  /** JSDoc */\n  private readonly _options: ExtraErrorDataOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: ExtraErrorDataOptions) {\n    this._options = {\n      depth: 3,\n      ...options,\n    };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    addGlobalEventProcessor((event: Event, hint?: EventHint) => {\n      const self = getCurrentHub().getIntegration(ExtraErrorData);\n      if (!self) {\n        return event;\n      }\n      return self.enhanceEventWithErrorData(event, hint);\n    });\n  }\n\n  /**\n   * Attaches extracted information from the Error object to extra field in the Event\n   */\n  public enhanceEventWithErrorData(event: Event, hint?: EventHint): Event {\n    if (!hint || !hint.originalException || !isError(hint.originalException)) {\n      return event;\n    }\n    const name = (hint.originalException as ExtendedError).name || hint.originalException.constructor.name;\n\n    const errorData = this._extractErrorData(hint.originalException as ExtendedError);\n\n    if (errorData) {\n      let contexts = {\n        ...event.contexts,\n      };\n\n      const normalizedErrorData = normalize(errorData, this._options.depth);\n      if (isPlainObject(normalizedErrorData)) {\n        contexts = {\n          ...event.contexts,\n          [name]: {\n            ...normalizedErrorData,\n          },\n        };\n      }\n\n      return {\n        ...event,\n        contexts,\n      };\n    }\n\n    return event;\n  }\n\n  /**\n   * Extract extra information from the Error object\n   */\n  private _extractErrorData(error: ExtendedError): Record<string, unknown> | null {\n    // We are trying to enhance already existing event, so no harm done if it won't succeed\n    try {\n      const nativeKeys = [\n        'name',\n        'message',\n        'stack',\n        'line',\n        'column',\n        'fileName',\n        'lineNumber',\n        'columnNumber',\n        'toJSON',\n      ];\n\n      const extraErrorInfo: Record<string, unknown> = {};\n\n      // We want only enumerable properties, thus `getOwnPropertyNames` is redundant here, as we filter keys anyway.\n      for (const key of Object.keys(error)) {\n        if (nativeKeys.indexOf(key) !== -1) {\n          continue;\n        }\n        const value = error[key];\n        extraErrorInfo[key] = isError(value) ? (value as Error).toString() : value;\n      }\n\n      // Check if someone attached `toJSON` method to grab even more properties (eg. axios is doing that)\n      if (typeof error.toJSON === 'function') {\n        const serializedError = error.toJSON() as Record<string, unknown>;\n\n        for (const key of Object.keys(serializedError)) {\n          const value = serializedError[key];\n          extraErrorInfo[key] = isError(value) ? (value as Error).toString() : value;\n        }\n      }\n\n      return extraErrorInfo;\n    } catch (oO) {\n      isDebugBuild() && logger.error('Unable to extract extra data from the Error object:', oO);\n    }\n\n    return null;\n  }\n}\n"]}