{"version":3,"file":"rewriteframes.js","sourceRoot":"","sources":["../src/rewriteframes.ts"],"names":[],"mappings":"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","sourcesContent":["import { Event, EventProcessor, Hub, Integration, StackFrame, Stacktrace } from '@sentry/types';\nimport { basename, relative } from '@sentry/utils';\n\ntype StackFrameIteratee = (frame: StackFrame) => StackFrame;\n\n/** Rewrite event frames paths */\nexport class RewriteFrames implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'RewriteFrames';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = RewriteFrames.id;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _root?: string;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _prefix: string = 'app:///';\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { root?: string; prefix?: string; iteratee?: StackFrameIteratee } = {}) {\n    if (options.root) {\n      this._root = options.root;\n    }\n    if (options.prefix) {\n      this._prefix = options.prefix;\n    }\n    if (options.iteratee) {\n      this._iteratee = options.iteratee;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    addGlobalEventProcessor(event => {\n      const self = getCurrentHub().getIntegration(RewriteFrames);\n      if (self) {\n        return self.process(event);\n      }\n      return event;\n    });\n  }\n\n  /** JSDoc */\n  public process(originalEvent: Event): Event {\n    let processedEvent = originalEvent;\n\n    if (originalEvent.exception && Array.isArray(originalEvent.exception.values)) {\n      processedEvent = this._processExceptionsEvent(processedEvent);\n    }\n\n    if (originalEvent.stacktrace) {\n      processedEvent = this._processStacktraceEvent(processedEvent);\n    }\n\n    return processedEvent;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _iteratee: StackFrameIteratee = (frame: StackFrame) => {\n    if (!frame.filename) {\n      return frame;\n    }\n    // Check if the frame filename begins with `/` or a Windows-style prefix such as `C:\\`\n    const isWindowsFrame = /^[A-Z]:\\\\/.test(frame.filename);\n    const startsWithSlash = /^\\//.test(frame.filename);\n    if (isWindowsFrame || startsWithSlash) {\n      const filename = isWindowsFrame\n        ? frame.filename\n            .replace(/^[A-Z]:/, '') // remove Windows-style prefix\n            .replace(/\\\\/g, '/') // replace all `\\\\` instances with `/`\n        : frame.filename;\n      const base = this._root ? relative(this._root, filename) : basename(filename);\n      frame.filename = `${this._prefix}${base}`;\n    }\n    return frame;\n  };\n\n  /** JSDoc */\n  private _processExceptionsEvent(event: Event): Event {\n    try {\n      return {\n        ...event,\n        exception: {\n          ...event.exception,\n          // The check for this is performed inside `process` call itself, safe to skip here\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          values: event.exception!.values!.map(value => ({\n            ...value,\n            stacktrace: this._processStacktrace(value.stacktrace),\n          })),\n        },\n      };\n    } catch (_oO) {\n      return event;\n    }\n  }\n\n  /** JSDoc */\n  private _processStacktraceEvent(event: Event): Event {\n    try {\n      return {\n        ...event,\n        stacktrace: this._processStacktrace(event.stacktrace),\n      };\n    } catch (_oO) {\n      return event;\n    }\n  }\n\n  /** JSDoc */\n  private _processStacktrace(stacktrace?: Stacktrace): Stacktrace {\n    return {\n      ...stacktrace,\n      frames: stacktrace && stacktrace.frames && stacktrace.frames.map(f => this._iteratee(f)),\n    };\n  }\n}\n"]}