{"version":3,"file":"dedupe.debug.min.js","sources":["../../utils/src/global.ts","../../utils/src/logger.ts","../src/dedupe.ts"],"sourcesContent":["/**\n * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,\n * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { Integration } from '@sentry/types';\n\nimport { isNodeEnv } from './node';\n\n/** Internal */\ninterface SentryGlobal {\n  Sentry?: {\n    Integrations?: Integration[];\n  };\n  SENTRY_ENVIRONMENT?: string;\n  SENTRY_DSN?: string;\n  SENTRY_RELEASE?: {\n    id?: string;\n  };\n  __SENTRY__: {\n    globalEventProcessors: any;\n    hub: any;\n    logger: any;\n  };\n}\n\nconst fallbackGlobalObject = {};\n\n/**\n * Safely get global scope object\n *\n * @returns Global scope object\n */\nexport function getGlobalObject<T>(): T & SentryGlobal {\n  return (\n    isNodeEnv()\n      ? global\n      : typeof window !== 'undefined' // eslint-disable-line no-restricted-globals\n      ? window // eslint-disable-line no-restricted-globals\n      : typeof self !== 'undefined'\n      ? self\n      : fallbackGlobalObject\n  ) as T & SentryGlobal;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { WrappedFunction } from '@sentry/types';\n\nimport { isDebugBuild } from './env';\nimport { getGlobalObject } from './global';\n\n// TODO: Implement different loggers for different environments\nconst global = getGlobalObject<Window | NodeJS.Global>();\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\nexport const CONSOLE_LEVELS = ['debug', 'info', 'warn', 'error', 'log', 'assert'];\n\n/** JSDoc */\ninterface ExtensibleConsole extends Console {\n  [key: string]: any;\n}\n\n/**\n * Temporarily unwrap `console.log` and friends in order to perform the given callback using the original methods.\n * Restores wrapping after the callback completes.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nexport function consoleSandbox(callback: () => any): any {\n  const global = getGlobalObject<Window>();\n\n  if (!('console' in global)) {\n    return callback();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  const originalConsole = (global as any).console as ExtensibleConsole;\n  const wrappedLevels: { [key: string]: any } = {};\n\n  // Restore all wrapped console methods\n  CONSOLE_LEVELS.forEach(level => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (level in (global as any).console && (originalConsole[level] as WrappedFunction).__sentry_original__) {\n      wrappedLevels[level] = originalConsole[level] as WrappedFunction;\n      originalConsole[level] = (originalConsole[level] as WrappedFunction).__sentry_original__;\n    }\n  });\n\n  // Perform callback manipulations\n  const result = callback();\n\n  // Revert restoration to wrapped state\n  Object.keys(wrappedLevels).forEach(level => {\n    originalConsole[level] = wrappedLevels[level];\n  });\n\n  return result;\n}\n\n/** JSDoc */\nclass Logger {\n  /** JSDoc */\n  private _enabled: boolean;\n\n  /** JSDoc */\n  public constructor() {\n    this._enabled = false;\n  }\n\n  /** JSDoc */\n  public disable(): void {\n    this._enabled = false;\n  }\n\n  /** JSDoc */\n  public enable(): void {\n    this._enabled = true;\n  }\n\n  /** JSDoc */\n  public log(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.log(`${PREFIX}[Log]:`, ...args);\n    });\n  }\n\n  /** JSDoc */\n  public warn(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.warn(`${PREFIX}[Warn]:`, ...args);\n    });\n  }\n\n  /** JSDoc */\n  public error(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.error(`${PREFIX}[Error]:`, ...args);\n    });\n  }\n}\n\nconst sentryGlobal = global.__SENTRY__ || {};\nconst logger = (sentryGlobal.logger as Logger) || new Logger();\n\nif (isDebugBuild()) {\n  // Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\n  sentryGlobal.logger = logger;\n  global.__SENTRY__ = sentryGlobal;\n}\n\nexport { logger };\n","import { Event, EventProcessor, Exception, Hub, Integration, StackFrame } from '@sentry/types';\nimport { isDebugBuild, logger } from '@sentry/utils';\n\n/** Deduplication filter */\nexport class Dedupe implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Dedupe';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Dedupe.id;\n\n  /**\n   * @inheritDoc\n   */\n  private _previousEvent?: Event;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    addGlobalEventProcessor((currentEvent: Event) => {\n      const self = getCurrentHub().getIntegration(Dedupe);\n      if (self) {\n        // Juuust in case something goes wrong\n        try {\n          if (_shouldDropEvent(currentEvent, self._previousEvent)) {\n            isDebugBuild() && logger.warn('Event dropped due to being a duplicate of previously captured event.');\n            return null;\n          }\n        } catch (_oO) {\n          return (self._previousEvent = currentEvent);\n        }\n\n        return (self._previousEvent = currentEvent);\n      }\n      return currentEvent;\n    });\n  }\n}\n\n/** JSDoc */\nexport function _shouldDropEvent(currentEvent: Event, previousEvent?: Event): boolean {\n  if (!previousEvent) {\n    return false;\n  }\n\n  if (_isSameMessageEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  if (_isSameExceptionEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  return false;\n}\n\n/** JSDoc */\nfunction _isSameMessageEvent(currentEvent: Event, previousEvent: Event): boolean {\n  const currentMessage = currentEvent.message;\n  const previousMessage = previousEvent.message;\n\n  // If neither event has a message property, they were both exceptions, so bail out\n  if (!currentMessage && !previousMessage) {\n    return false;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if ((currentMessage && !previousMessage) || (!currentMessage && previousMessage)) {\n    return false;\n  }\n\n  if (currentMessage !== previousMessage) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameExceptionEvent(currentEvent: Event, previousEvent: Event): boolean {\n  const previousException = _getExceptionFromEvent(previousEvent);\n  const currentException = _getExceptionFromEvent(currentEvent);\n\n  if (!previousException || !currentException) {\n    return false;\n  }\n\n  if (previousException.type !== currentException.type || previousException.value !== currentException.value) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameStacktrace(currentEvent: Event, previousEvent: Event): boolean {\n  let currentFrames = _getFramesFromEvent(currentEvent);\n  let previousFrames = _getFramesFromEvent(previousEvent);\n\n  // If neither event has a stacktrace, they are assumed to be the same\n  if (!currentFrames && !previousFrames) {\n    return true;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if ((currentFrames && !previousFrames) || (!currentFrames && previousFrames)) {\n    return false;\n  }\n\n  currentFrames = currentFrames as StackFrame[];\n  previousFrames = previousFrames as StackFrame[];\n\n  // If number of frames differ, they are not the same\n  if (previousFrames.length !== currentFrames.length) {\n    return false;\n  }\n\n  // Otherwise, compare the two\n  for (let i = 0; i < previousFrames.length; i++) {\n    const frameA = previousFrames[i];\n    const frameB = currentFrames[i];\n\n    if (\n      frameA.filename !== frameB.filename ||\n      frameA.lineno !== frameB.lineno ||\n      frameA.colno !== frameB.colno ||\n      frameA.function !== frameB.function\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameFingerprint(currentEvent: Event, previousEvent: Event): boolean {\n  let currentFingerprint = currentEvent.fingerprint;\n  let previousFingerprint = previousEvent.fingerprint;\n\n  // If neither event has a fingerprint, they are assumed to be the same\n  if (!currentFingerprint && !previousFingerprint) {\n    return true;\n  }\n\n  // If only one event has a fingerprint, but not the other one, they are not the same\n  if ((currentFingerprint && !previousFingerprint) || (!currentFingerprint && previousFingerprint)) {\n    return false;\n  }\n\n  currentFingerprint = currentFingerprint as string[];\n  previousFingerprint = previousFingerprint as string[];\n\n  // Otherwise, compare the two\n  try {\n    return !!(currentFingerprint.join('') === previousFingerprint.join(''));\n  } catch (_oO) {\n    return false;\n  }\n}\n\n/** JSDoc */\nfunction _getExceptionFromEvent(event: Event): Exception | undefined {\n  return event.exception && event.exception.values && event.exception.values[0];\n}\n\n/** JSDoc */\nfunction _getFramesFromEvent(event: Event): StackFrame[] | undefined {\n  const exception = event.exception;\n\n  if (exception) {\n    try {\n      // @ts-ignore Object could be undefined\n      return exception.values[0].stacktrace.frames;\n    } catch (_oO) {\n      return undefined;\n    }\n  } else if (event.stacktrace) {\n    return event.stacktrace.frames;\n  }\n  return undefined;\n}\n"],"names":["fallbackGlobalObject","getGlobalObject","window","self","global","PREFIX","CONSOLE_LEVELS","consoleSandbox","callback","originalConsole","console","wrappedLevels","forEach","level","__sentry_original__","result","Object","keys","this","_enabled","Logger","_i","args","_a","log","warn","error","sentryGlobal","__SENTRY__","logger","Dedupe","id","addGlobalEventProcessor","getCurrentHub","currentEvent","getIntegration","_shouldDropEvent","_previousEvent","_oO","previousEvent","currentMessage","message","previousMessage","_isSameFingerprint","_isSameStacktrace","_isSameMessageEvent","previousException","_getExceptionFromEvent","currentException","type","value","_isSameExceptionEvent","currentFrames","_getFramesFromEvent","previousFrames","length","i","frameA","frameB","filename","lineno","colno","function","currentFingerprint","fingerprint","previousFingerprint","join","event","exception","values","stacktrace","frames"],"mappings":"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"}