{"version":3,"file":"angular.es6.debug.min.js","sources":["../../utils/src/global.ts","../../utils/src/logger.ts","../src/angular.ts"],"sourcesContent":["/**\n * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,\n * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { Integration } from '@sentry/types';\n\nimport { isNodeEnv } from './node';\n\n/** Internal */\ninterface SentryGlobal {\n  Sentry?: {\n    Integrations?: Integration[];\n  };\n  SENTRY_ENVIRONMENT?: string;\n  SENTRY_DSN?: string;\n  SENTRY_RELEASE?: {\n    id?: string;\n  };\n  __SENTRY__: {\n    globalEventProcessors: any;\n    hub: any;\n    logger: any;\n  };\n}\n\nconst fallbackGlobalObject = {};\n\n/**\n * Safely get global scope object\n *\n * @returns Global scope object\n */\nexport function getGlobalObject<T>(): T & SentryGlobal {\n  return (\n    isNodeEnv()\n      ? global\n      : typeof window !== 'undefined' // eslint-disable-line no-restricted-globals\n      ? window // eslint-disable-line no-restricted-globals\n      : typeof self !== 'undefined'\n      ? self\n      : fallbackGlobalObject\n  ) as T & SentryGlobal;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { WrappedFunction } from '@sentry/types';\n\nimport { isDebugBuild } from './env';\nimport { getGlobalObject } from './global';\n\n// TODO: Implement different loggers for different environments\nconst global = getGlobalObject<Window | NodeJS.Global>();\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\nexport const CONSOLE_LEVELS = ['debug', 'info', 'warn', 'error', 'log', 'assert'];\n\n/** JSDoc */\ninterface ExtensibleConsole extends Console {\n  [key: string]: any;\n}\n\n/**\n * Temporarily unwrap `console.log` and friends in order to perform the given callback using the original methods.\n * Restores wrapping after the callback completes.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nexport function consoleSandbox(callback: () => any): any {\n  const global = getGlobalObject<Window>();\n\n  if (!('console' in global)) {\n    return callback();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  const originalConsole = (global as any).console as ExtensibleConsole;\n  const wrappedLevels: { [key: string]: any } = {};\n\n  // Restore all wrapped console methods\n  CONSOLE_LEVELS.forEach(level => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (level in (global as any).console && (originalConsole[level] as WrappedFunction).__sentry_original__) {\n      wrappedLevels[level] = originalConsole[level] as WrappedFunction;\n      originalConsole[level] = (originalConsole[level] as WrappedFunction).__sentry_original__;\n    }\n  });\n\n  // Perform callback manipulations\n  const result = callback();\n\n  // Revert restoration to wrapped state\n  Object.keys(wrappedLevels).forEach(level => {\n    originalConsole[level] = wrappedLevels[level];\n  });\n\n  return result;\n}\n\n/** JSDoc */\nclass Logger {\n  /** JSDoc */\n  private _enabled: boolean;\n\n  /** JSDoc */\n  public constructor() {\n    this._enabled = false;\n  }\n\n  /** JSDoc */\n  public disable(): void {\n    this._enabled = false;\n  }\n\n  /** JSDoc */\n  public enable(): void {\n    this._enabled = true;\n  }\n\n  /** JSDoc */\n  public log(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.log(`${PREFIX}[Log]:`, ...args);\n    });\n  }\n\n  /** JSDoc */\n  public warn(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.warn(`${PREFIX}[Warn]:`, ...args);\n    });\n  }\n\n  /** JSDoc */\n  public error(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.error(`${PREFIX}[Error]:`, ...args);\n    });\n  }\n}\n\nconst sentryGlobal = global.__SENTRY__ || {};\nconst logger = (sentryGlobal.logger as Logger) || new Logger();\n\nif (isDebugBuild()) {\n  // Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\n  sentryGlobal.logger = logger;\n  global.__SENTRY__ = sentryGlobal;\n}\n\nexport { logger };\n","import { Event, EventProcessor, Hub, Integration } from '@sentry/types';\nimport { getGlobalObject, isDebugBuild, logger } from '@sentry/utils';\n\n// See https://github.com/angular/angular.js/blob/v1.4.7/src/minErr.js\nconst angularPattern = /^\\[((?:[$a-zA-Z0-9]+:)?(?:[$a-zA-Z0-9]+))\\] (.*?)\\n?(\\S+)$/;\n\n/**\n * AngularJS integration\n *\n * Provides an $exceptionHandler for AngularJS\n */\nexport class Angular implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'AngularJS';\n\n  /**\n   * moduleName used in Angular's DI resolution algorithm\n   */\n  public static moduleName: string = 'ngSentry';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Angular.id;\n\n  /**\n   * Angular's instance\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private readonly _angular: any;\n\n  /**\n   * ngSentry module instance\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private readonly _module: any;\n\n  /**\n   * Returns current hub.\n   */\n  private _getCurrentHub?: () => Hub;\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public constructor(options: { angular?: any } = {}) {\n    isDebugBuild() && logger.log('You are still using the Angular integration, consider moving to @sentry/angular');\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n    this._angular = options.angular || getGlobalObject<any>().angular;\n\n    if (!this._angular) {\n      isDebugBuild() && logger.error('AngularIntegration is missing an Angular instance');\n      return;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    this._module = this._angular.module(Angular.moduleName, []);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    if (!this._module) {\n      return;\n    }\n\n    this._getCurrentHub = getCurrentHub;\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    this._module.config([\n      '$provide',\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      ($provide: any): void => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        $provide.decorator('$exceptionHandler', ['$delegate', this._$exceptionHandlerDecorator.bind(this)]);\n      },\n    ]);\n  }\n\n  /**\n   * Angular's exceptionHandler for Sentry integration\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _$exceptionHandlerDecorator($delegate: any): any {\n    return (exception: Error, cause?: string): void => {\n      const hub = this._getCurrentHub && this._getCurrentHub();\n\n      if (hub && hub.getIntegration(Angular)) {\n        hub.withScope(scope => {\n          if (cause) {\n            scope.setExtra('cause', cause);\n          }\n\n          scope.addEventProcessor((event: Event) => {\n            const ex = event.exception && event.exception.values && event.exception.values[0];\n\n            if (ex) {\n              const matches = angularPattern.exec(ex.value || '');\n\n              if (matches) {\n                // This type now becomes something like: $rootScope:inprog\n                ex.type = matches[1];\n                ex.value = matches[2];\n                event.message = `${ex.type}: ${ex.value}`;\n                // auto set a new tag specifically for the angular error url\n                event.extra = {\n                  ...event.extra,\n                  angularDocs: matches[3].substr(0, 250),\n                };\n              }\n            }\n\n            return event;\n          });\n\n          hub.captureException(exception);\n        });\n      }\n      $delegate(exception, cause);\n    };\n  }\n}\n"],"names":["fallbackGlobalObject","getGlobalObject","window","self","global","PREFIX","CONSOLE_LEVELS","consoleSandbox","callback","originalConsole","console","wrappedLevels","forEach","level","__sentry_original__","result","Object","keys","sentryGlobal","__SENTRY__","logger","constructor","this","_enabled","disable","enable","log","args","warn","error","angularPattern","Angular","options","id","_angular","angular","_module","module","moduleName","setupOnce","_","getCurrentHub","_getCurrentHub","config","$provide","decorator","_$exceptionHandlerDecorator","bind","$delegate","exception","cause","hub","getIntegration","withScope","scope","setExtra","addEventProcessor","event","ex","values","matches","exec","value","type","message","extra","angularDocs","substr","captureException"],"mappings":";sBA4BA,MAAMA,EAAuB,YAObC,IACd,MAGwB,oBAAXC,OACPA,OACgB,oBAATC,KACPA,KACAH,ECpCR,MAAMI,EAASH,IAGTI,EAAS,iBAEFC,EAAiB,CAAC,QAAS,OAAQ,OAAQ,QAAS,MAAO,mBAcxDC,EAAeC,GAC7B,MAAMJ,EAASH,IAEf,KAAM,YAAaG,GACjB,OAAOI,IAIT,MAAMC,EAAmBL,EAAeM,QAClCC,EAAwC,GAG9CL,EAAeM,SAAQC,IAEjBA,KAAUT,EAAeM,SAAYD,EAAgBI,GAA2BC,sBAClFH,EAAcE,GAASJ,EAAgBI,GACvCJ,EAAgBI,GAAUJ,EAAgBI,GAA2BC,wBAKzE,MAAMC,EAASP,IAOf,OAJAQ,OAAOC,KAAKN,GAAeC,SAAQC,IACjCJ,EAAgBI,GAASF,EAAcE,MAGlCE,EAsDT,MAAMG,EAAed,EAAOe,YAAc,GACpCC,EAAUF,EAAaE,QAAqB,IAnDlD,MAKEC,cACEC,KAAKC,GAAW,EAIXC,UACLF,KAAKC,GAAW,EAIXE,SACLH,KAAKC,GAAW,EAIXG,OAAOC,GACPL,KAAKC,GAGVhB,GAAe,KACbH,EAAOM,QAAQgB,IAAI,GAAGrB,aAAmBsB,MAKtCC,QAAQD,GACRL,KAAKC,GAGVhB,GAAe,KACbH,EAAOM,QAAQkB,KAAK,GAAGvB,cAAoBsB,MAKxCE,SAASF,GACTL,KAAKC,GAGVhB,GAAe,KACbH,EAAOM,QAAQmB,MAAM,GAAGxB,eAAqBsB,QAUjDT,EAAaE,OAASA,EACtBhB,EAAOe,WAAaD,EC9GtB,MAAMY,EAAiB,mEAOVC,EAqCXV,YAAmBW,EAA6B,IAvBzCV,UAAeS,EAAQE,GAwBVb,EAAOM,IAAI,mFAG7BJ,KAAKY,EAAWF,EAAQG,SAAWlC,IAAuBkC,QAErDb,KAAKY,EAMVZ,KAAKc,EAAUd,KAAKY,EAASG,OAAON,EAAQO,WAAY,IALpClB,EAAOS,MAAM,qDAW5BU,UAAUC,EAAuCC,GACjDnB,KAAKc,IAIVd,KAAKoB,EAAiBD,EAGtBnB,KAAKc,EAAQO,OAAO,CAClB,WAECC,IAECA,EAASC,UAAU,oBAAqB,CAAC,YAAavB,KAAKwB,EAA4BC,KAAKzB,YAS1FwB,EAA4BE,GAClC,MAAO,CAACC,EAAkBC,KACxB,MAAMC,EAAM7B,KAAKoB,GAAkBpB,KAAKoB,IAEpCS,GAAOA,EAAIC,eAAerB,IAC5BoB,EAAIE,WAAUC,IACRJ,GACFI,EAAMC,SAAS,QAASL,GAG1BI,EAAME,mBAAmBC,IACvB,MAAMC,EAAKD,EAAMR,WAAaQ,EAAMR,UAAUU,QAAUF,EAAMR,UAAUU,OAAO,GAE/E,GAAID,EAAI,CACN,MAAME,EAAU9B,EAAe+B,KAAKH,EAAGI,OAAS,IAE5CF,IAEFF,EAAGK,KAAOH,EAAQ,GAClBF,EAAGI,MAAQF,EAAQ,GACnBH,EAAMO,QAAU,GAAGN,EAAGK,SAASL,EAAGI,QAElCL,EAAMQ,qCACDR,EAAMQ,QACTC,YAAaN,EAAQ,GAAGO,OAAO,EAAG,QAKxC,OAAOV,KAGTN,EAAIiB,iBAAiBnB,MAGzBD,EAAUC,EAAWC,kBA5GXnB,KAAa,YAKbA,aAAqB"}