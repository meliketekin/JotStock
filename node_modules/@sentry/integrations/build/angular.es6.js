/*! @sentry/integrations 6.19.2 (f49c509) | https://github.com/getsentry/sentry-javascript */
(function (__window) {
var exports = {};

/**
 * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,
 * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.
 */
const fallbackGlobalObject = {};
/**
 * Safely get global scope object
 *
 * @returns Global scope object
 */
function getGlobalObject() {
    return (typeof window !== 'undefined' // eslint-disable-line no-restricted-globals
            ? window // eslint-disable-line no-restricted-globals
            : typeof self !== 'undefined'
                ? self
                : fallbackGlobalObject);
}

// TODO: Implement different loggers for different environments
const global = getGlobalObject();
/** Prefix for logging strings */
const PREFIX = 'Sentry Logger ';
const CONSOLE_LEVELS = ['debug', 'info', 'warn', 'error', 'log', 'assert'];
/**
 * Temporarily unwrap `console.log` and friends in order to perform the given callback using the original methods.
 * Restores wrapping after the callback completes.
 *
 * @param callback The function to run against the original `console` messages
 * @returns The results of the callback
 */
function consoleSandbox(callback) {
    const global = getGlobalObject();
    if (!('console' in global)) {
        return callback();
    }
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    const originalConsole = global.console;
    const wrappedLevels = {};
    // Restore all wrapped console methods
    CONSOLE_LEVELS.forEach(level => {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        if (level in global.console && originalConsole[level].__sentry_original__) {
            wrappedLevels[level] = originalConsole[level];
            originalConsole[level] = originalConsole[level].__sentry_original__;
        }
    });
    // Perform callback manipulations
    const result = callback();
    // Revert restoration to wrapped state
    Object.keys(wrappedLevels).forEach(level => {
        originalConsole[level] = wrappedLevels[level];
    });
    return result;
}
/** JSDoc */
class Logger {
    /** JSDoc */
    constructor() {
        this._enabled = false;
    }
    /** JSDoc */
    disable() {
        this._enabled = false;
    }
    /** JSDoc */
    enable() {
        this._enabled = true;
    }
    /** JSDoc */
    log(...args) {
        if (!this._enabled) {
            return;
        }
        consoleSandbox(() => {
            global.console.log(`${PREFIX}[Log]:`, ...args);
        });
    }
    /** JSDoc */
    warn(...args) {
        if (!this._enabled) {
            return;
        }
        consoleSandbox(() => {
            global.console.warn(`${PREFIX}[Warn]:`, ...args);
        });
    }
    /** JSDoc */
    error(...args) {
        if (!this._enabled) {
            return;
        }
        consoleSandbox(() => {
            global.console.error(`${PREFIX}[Error]:`, ...args);
        });
    }
}
const sentryGlobal = global.__SENTRY__ || {};
const logger = sentryGlobal.logger || new Logger();
{
    // Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used
    sentryGlobal.logger = logger;
    global.__SENTRY__ = sentryGlobal;
}

// See https://github.com/angular/angular.js/blob/v1.4.7/src/minErr.js
const angularPattern = /^\[((?:[$a-zA-Z0-9]+:)?(?:[$a-zA-Z0-9]+))\] (.*?)\n?(\S+)$/;
/**
 * AngularJS integration
 *
 * Provides an $exceptionHandler for AngularJS
 */
class Angular {
    /**
     * @inheritDoc
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    constructor(options = {}) {
        /**
         * @inheritDoc
         */
        this.name = Angular.id;
        logger.log('You are still using the Angular integration, consider moving to @sentry/angular');
        // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access
        this._angular = options.angular || getGlobalObject().angular;
        if (!this._angular) {
            logger.error('AngularIntegration is missing an Angular instance');
            return;
        }
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        this._module = this._angular.module(Angular.moduleName, []);
    }
    /**
     * @inheritDoc
     */
    setupOnce(_, getCurrentHub) {
        if (!this._module) {
            return;
        }
        this._getCurrentHub = getCurrentHub;
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        this._module.config([
            '$provide',
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            ($provide) => {
                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                $provide.decorator('$exceptionHandler', ['$delegate', this._$exceptionHandlerDecorator.bind(this)]);
            },
        ]);
    }
    /**
     * Angular's exceptionHandler for Sentry integration
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    _$exceptionHandlerDecorator($delegate) {
        return (exception, cause) => {
            const hub = this._getCurrentHub && this._getCurrentHub();
            if (hub && hub.getIntegration(Angular)) {
                hub.withScope(scope => {
                    if (cause) {
                        scope.setExtra('cause', cause);
                    }
                    scope.addEventProcessor((event) => {
                        const ex = event.exception && event.exception.values && event.exception.values[0];
                        if (ex) {
                            const matches = angularPattern.exec(ex.value || '');
                            if (matches) {
                                // This type now becomes something like: $rootScope:inprog
                                ex.type = matches[1];
                                ex.value = matches[2];
                                event.message = `${ex.type}: ${ex.value}`;
                                // auto set a new tag specifically for the angular error url
                                event.extra = Object.assign(Object.assign({}, event.extra), { angularDocs: matches[3].substr(0, 250) });
                            }
                        }
                        return event;
                    });
                    hub.captureException(exception);
                });
            }
            $delegate(exception, cause);
        };
    }
}
/**
 * @inheritDoc
 */
Angular.id = 'AngularJS';
/**
 * moduleName used in Angular's DI resolution algorithm
 */
Angular.moduleName = 'ngSentry';

exports.Angular = Angular;


  // Add this module's exports to the global `Sentry.Integrations`
  __window.Sentry = __window.Sentry || {};
  __window.Sentry.Integrations = __window.Sentry.Integrations || {};
  for (var key in exports) {
    if (Object.prototype.hasOwnProperty.call(exports, key)) {
      __window.Sentry.Integrations[key] = exports[key];
    }
  }
}(window));
//# sourceMappingURL=angular.es6.js.map
