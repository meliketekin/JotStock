{"version":3,"file":"debug.es6.debug.min.js","sources":["../../utils/src/global.ts","../../utils/src/logger.ts","../src/debug.ts"],"sourcesContent":["/**\n * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,\n * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { Integration } from '@sentry/types';\n\nimport { isNodeEnv } from './node';\n\n/** Internal */\ninterface SentryGlobal {\n  Sentry?: {\n    Integrations?: Integration[];\n  };\n  SENTRY_ENVIRONMENT?: string;\n  SENTRY_DSN?: string;\n  SENTRY_RELEASE?: {\n    id?: string;\n  };\n  __SENTRY__: {\n    globalEventProcessors: any;\n    hub: any;\n    logger: any;\n  };\n}\n\nconst fallbackGlobalObject = {};\n\n/**\n * Safely get global scope object\n *\n * @returns Global scope object\n */\nexport function getGlobalObject<T>(): T & SentryGlobal {\n  return (\n    isNodeEnv()\n      ? global\n      : typeof window !== 'undefined' // eslint-disable-line no-restricted-globals\n      ? window // eslint-disable-line no-restricted-globals\n      : typeof self !== 'undefined'\n      ? self\n      : fallbackGlobalObject\n  ) as T & SentryGlobal;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { WrappedFunction } from '@sentry/types';\n\nimport { isDebugBuild } from './env';\nimport { getGlobalObject } from './global';\n\n// TODO: Implement different loggers for different environments\nconst global = getGlobalObject<Window | NodeJS.Global>();\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\nexport const CONSOLE_LEVELS = ['debug', 'info', 'warn', 'error', 'log', 'assert'];\n\n/** JSDoc */\ninterface ExtensibleConsole extends Console {\n  [key: string]: any;\n}\n\n/**\n * Temporarily unwrap `console.log` and friends in order to perform the given callback using the original methods.\n * Restores wrapping after the callback completes.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nexport function consoleSandbox(callback: () => any): any {\n  const global = getGlobalObject<Window>();\n\n  if (!('console' in global)) {\n    return callback();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  const originalConsole = (global as any).console as ExtensibleConsole;\n  const wrappedLevels: { [key: string]: any } = {};\n\n  // Restore all wrapped console methods\n  CONSOLE_LEVELS.forEach(level => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    if (level in (global as any).console && (originalConsole[level] as WrappedFunction).__sentry_original__) {\n      wrappedLevels[level] = originalConsole[level] as WrappedFunction;\n      originalConsole[level] = (originalConsole[level] as WrappedFunction).__sentry_original__;\n    }\n  });\n\n  // Perform callback manipulations\n  const result = callback();\n\n  // Revert restoration to wrapped state\n  Object.keys(wrappedLevels).forEach(level => {\n    originalConsole[level] = wrappedLevels[level];\n  });\n\n  return result;\n}\n\n/** JSDoc */\nclass Logger {\n  /** JSDoc */\n  private _enabled: boolean;\n\n  /** JSDoc */\n  public constructor() {\n    this._enabled = false;\n  }\n\n  /** JSDoc */\n  public disable(): void {\n    this._enabled = false;\n  }\n\n  /** JSDoc */\n  public enable(): void {\n    this._enabled = true;\n  }\n\n  /** JSDoc */\n  public log(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.log(`${PREFIX}[Log]:`, ...args);\n    });\n  }\n\n  /** JSDoc */\n  public warn(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.warn(`${PREFIX}[Warn]:`, ...args);\n    });\n  }\n\n  /** JSDoc */\n  public error(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.error(`${PREFIX}[Error]:`, ...args);\n    });\n  }\n}\n\nconst sentryGlobal = global.__SENTRY__ || {};\nconst logger = (sentryGlobal.logger as Logger) || new Logger();\n\nif (isDebugBuild()) {\n  // Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\n  sentryGlobal.logger = logger;\n  global.__SENTRY__ = sentryGlobal;\n}\n\nexport { logger };\n","import { Event, EventHint, EventProcessor, Hub, Integration } from '@sentry/types';\nimport { consoleSandbox } from '@sentry/utils';\n\ninterface DebugOptions {\n  /** Controls whether console output created by this integration should be stringified. Default: `false` */\n  stringify?: boolean;\n  /** Controls whether a debugger should be launched before an event is sent. Default: `false` */\n  debugger?: boolean;\n}\n\n/**\n * Integration to debug sent Sentry events.\n * This integration should not be used in production\n */\nexport class Debug implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Debug';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Debug.id;\n\n  private readonly _options: DebugOptions;\n\n  public constructor(options?: DebugOptions) {\n    this._options = {\n      debugger: false,\n      stringify: false,\n      ...options,\n    };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    addGlobalEventProcessor((event: Event, hint?: EventHint) => {\n      const self = getCurrentHub().getIntegration(Debug);\n      if (self) {\n        if (self._options.debugger) {\n          // eslint-disable-next-line no-debugger\n          debugger;\n        }\n\n        /* eslint-disable no-console */\n        consoleSandbox(() => {\n          if (self._options.stringify) {\n            console.log(JSON.stringify(event, null, 2));\n            if (hint) {\n              console.log(JSON.stringify(hint, null, 2));\n            }\n          } else {\n            console.log(event);\n            if (hint) {\n              console.log(hint);\n            }\n          }\n        });\n        /* eslint-enable no-console */\n      }\n      return event;\n    });\n  }\n}\n"],"names":["fallbackGlobalObject","getGlobalObject","window","self","global","PREFIX","CONSOLE_LEVELS","consoleSandbox","callback","originalConsole","console","wrappedLevels","forEach","level","__sentry_original__","result","Object","keys","sentryGlobal","__SENTRY__","logger","constructor","this","_enabled","disable","enable","log","args","warn","error","Debug","options","id","_options","debugger","stringify","setupOnce","addGlobalEventProcessor","getCurrentHub","event","hint","getIntegration","JSON"],"mappings":";sBA4BA,MAAMA,EAAuB,YAObC,IACd,MAGwB,oBAAXC,OACPA,OACgB,oBAATC,KACPA,KACAH,ECpCR,MAAMI,EAASH,IAGTI,EAAS,iBAEFC,EAAiB,CAAC,QAAS,OAAQ,OAAQ,QAAS,MAAO,mBAcxDC,EAAeC,GAC7B,MAAMJ,EAASH,IAEf,KAAM,YAAaG,GACjB,OAAOI,IAIT,MAAMC,EAAmBL,EAAeM,QAClCC,EAAwC,GAG9CL,EAAeM,SAAQC,IAEjBA,KAAUT,EAAeM,SAAYD,EAAgBI,GAA2BC,sBAClFH,EAAcE,GAASJ,EAAgBI,GACvCJ,EAAgBI,GAAUJ,EAAgBI,GAA2BC,wBAKzE,MAAMC,EAASP,IAOf,OAJAQ,OAAOC,KAAKN,GAAeC,SAAQC,IACjCJ,EAAgBI,GAASF,EAAcE,MAGlCE,EAsDT,MAAMG,EAAed,EAAOe,YAAc,GACpCC,EAAUF,EAAaE,QAAqB,IAnDlD,MAKEC,cACEC,KAAKC,GAAW,EAIXC,UACLF,KAAKC,GAAW,EAIXE,SACLH,KAAKC,GAAW,EAIXG,OAAOC,GACPL,KAAKC,GAGVhB,GAAe,KACbH,EAAOM,QAAQgB,IAAI,GAAGrB,aAAmBsB,MAKtCC,QAAQD,GACRL,KAAKC,GAGVhB,GAAe,KACbH,EAAOM,QAAQkB,KAAK,GAAGvB,cAAoBsB,MAKxCE,SAASF,GACTL,KAAKC,GAGVhB,GAAe,KACbH,EAAOM,QAAQmB,MAAM,GAAGxB,eAAqBsB,QAUjDT,EAAaE,OAASA,EACtBhB,EAAOe,WAAaD,QCpGTY,EAaXT,YAAmBU,GAJZT,UAAeQ,EAAME,GAK1BV,KAAKW,iBACHC,UAAU,EACVC,WAAW,GACRJ,GAOAK,UAAUC,EAA6DC,GAC5ED,GAAwB,CAACE,EAAcC,KACrC,MAAMrC,EAAOmC,IAAgBG,eAAeX,GAuB5C,OAtBI3B,IACEA,EAAK8B,EAASC,SAMlB3B,GAAe,KACTJ,EAAK8B,EAASE,WAChBzB,QAAQgB,IAAIgB,KAAKP,UAAUI,EAAO,KAAM,IACpCC,GACF9B,QAAQgB,IAAIgB,KAAKP,UAAUK,EAAM,KAAM,MAGzC9B,QAAQgB,IAAIa,GACRC,GACF9B,QAAQgB,IAAIc,QAMbD,mBA7CGT,KAAa"}