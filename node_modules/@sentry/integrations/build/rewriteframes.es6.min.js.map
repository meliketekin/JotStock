{"version":3,"file":"rewriteframes.es6.min.js","sources":["../../utils/src/path.ts","../src/rewriteframes.ts"],"sourcesContent":["// Slightly modified (no IE8 support, ES6) and transcribed to TypeScript\n// https://raw.githubusercontent.com/calvinmetcalf/rollup-plugin-node-builtins/master/src/es6/path.js\n\n/** JSDoc */\nfunction normalizeArray(parts: string[], allowAboveRoot?: boolean): string[] {\n  // if the path tries to go above the root, `up` ends up > 0\n  let up = 0;\n  for (let i = parts.length - 1; i >= 0; i--) {\n    const last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      // eslint-disable-next-line no-plusplus\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      // eslint-disable-next-line no-plusplus\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    // eslint-disable-next-line no-plusplus\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nconst splitPathRe = /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^/]+?|)(\\.[^./]*|))(?:[/]*)$/;\n/** JSDoc */\nfunction splitPath(filename: string): string[] {\n  const parts = splitPathRe.exec(filename);\n  return parts ? parts.slice(1) : [];\n}\n\n// path.resolve([from ...], to)\n// posix version\n/** JSDoc */\nexport function resolve(...args: string[]): string {\n  let resolvedPath = '';\n  let resolvedAbsolute = false;\n\n  for (let i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    const path = i >= 0 ? args[i] : '/';\n\n    // Skip empty entries\n    if (!path) {\n      continue;\n    }\n\n    resolvedPath = `${path}/${resolvedPath}`;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(\n    resolvedPath.split('/').filter(p => !!p),\n    !resolvedAbsolute,\n  ).join('/');\n\n  return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';\n}\n\n/** JSDoc */\nfunction trim(arr: string[]): string[] {\n  let start = 0;\n  for (; start < arr.length; start++) {\n    if (arr[start] !== '') {\n      break;\n    }\n  }\n\n  let end = arr.length - 1;\n  for (; end >= 0; end--) {\n    if (arr[end] !== '') {\n      break;\n    }\n  }\n\n  if (start > end) {\n    return [];\n  }\n  return arr.slice(start, end - start + 1);\n}\n\n// path.relative(from, to)\n// posix version\n/** JSDoc */\nexport function relative(from: string, to: string): string {\n  /* eslint-disable no-param-reassign */\n  from = resolve(from).substr(1);\n  to = resolve(to).substr(1);\n  /* eslint-enable no-param-reassign */\n\n  const fromParts = trim(from.split('/'));\n  const toParts = trim(to.split('/'));\n\n  const length = Math.min(fromParts.length, toParts.length);\n  let samePartsLength = length;\n  for (let i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  let outputParts = [];\n  for (let i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n}\n\n// path.normalize(path)\n// posix version\n/** JSDoc */\nexport function normalizePath(path: string): string {\n  const isPathAbsolute = isAbsolute(path);\n  const trailingSlash = path.substr(-1) === '/';\n\n  // Normalize the path\n  let normalizedPath = normalizeArray(\n    path.split('/').filter(p => !!p),\n    !isPathAbsolute,\n  ).join('/');\n\n  if (!normalizedPath && !isPathAbsolute) {\n    normalizedPath = '.';\n  }\n  if (normalizedPath && trailingSlash) {\n    normalizedPath += '/';\n  }\n\n  return (isPathAbsolute ? '/' : '') + normalizedPath;\n}\n\n// posix version\n/** JSDoc */\nexport function isAbsolute(path: string): boolean {\n  return path.charAt(0) === '/';\n}\n\n// posix version\n/** JSDoc */\nexport function join(...args: string[]): string {\n  return normalizePath(args.join('/'));\n}\n\n/** JSDoc */\nexport function dirname(path: string): string {\n  const result = splitPath(path);\n  const root = result[0];\n  let dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n}\n\n/** JSDoc */\nexport function basename(path: string, ext?: string): string {\n  let f = splitPath(path)[2];\n  if (ext && f.substr(ext.length * -1) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n}\n","import { Event, EventProcessor, Hub, Integration, StackFrame, Stacktrace } from '@sentry/types';\nimport { basename, relative } from '@sentry/utils';\n\ntype StackFrameIteratee = (frame: StackFrame) => StackFrame;\n\n/** Rewrite event frames paths */\nexport class RewriteFrames implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'RewriteFrames';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = RewriteFrames.id;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _root?: string;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _prefix: string = 'app:///';\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { root?: string; prefix?: string; iteratee?: StackFrameIteratee } = {}) {\n    if (options.root) {\n      this._root = options.root;\n    }\n    if (options.prefix) {\n      this._prefix = options.prefix;\n    }\n    if (options.iteratee) {\n      this._iteratee = options.iteratee;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    addGlobalEventProcessor(event => {\n      const self = getCurrentHub().getIntegration(RewriteFrames);\n      if (self) {\n        return self.process(event);\n      }\n      return event;\n    });\n  }\n\n  /** JSDoc */\n  public process(originalEvent: Event): Event {\n    let processedEvent = originalEvent;\n\n    if (originalEvent.exception && Array.isArray(originalEvent.exception.values)) {\n      processedEvent = this._processExceptionsEvent(processedEvent);\n    }\n\n    if (originalEvent.stacktrace) {\n      processedEvent = this._processStacktraceEvent(processedEvent);\n    }\n\n    return processedEvent;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _iteratee: StackFrameIteratee = (frame: StackFrame) => {\n    if (!frame.filename) {\n      return frame;\n    }\n    // Check if the frame filename begins with `/` or a Windows-style prefix such as `C:\\`\n    const isWindowsFrame = /^[A-Z]:\\\\/.test(frame.filename);\n    const startsWithSlash = /^\\//.test(frame.filename);\n    if (isWindowsFrame || startsWithSlash) {\n      const filename = isWindowsFrame\n        ? frame.filename\n            .replace(/^[A-Z]:/, '') // remove Windows-style prefix\n            .replace(/\\\\/g, '/') // replace all `\\\\` instances with `/`\n        : frame.filename;\n      const base = this._root ? relative(this._root, filename) : basename(filename);\n      frame.filename = `${this._prefix}${base}`;\n    }\n    return frame;\n  };\n\n  /** JSDoc */\n  private _processExceptionsEvent(event: Event): Event {\n    try {\n      return {\n        ...event,\n        exception: {\n          ...event.exception,\n          // The check for this is performed inside `process` call itself, safe to skip here\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          values: event.exception!.values!.map(value => ({\n            ...value,\n            stacktrace: this._processStacktrace(value.stacktrace),\n          })),\n        },\n      };\n    } catch (_oO) {\n      return event;\n    }\n  }\n\n  /** JSDoc */\n  private _processStacktraceEvent(event: Event): Event {\n    try {\n      return {\n        ...event,\n        stacktrace: this._processStacktrace(event.stacktrace),\n      };\n    } catch (_oO) {\n      return event;\n    }\n  }\n\n  /** JSDoc */\n  private _processStacktrace(stacktrace?: Stacktrace): Stacktrace {\n    return {\n      ...stacktrace,\n      frames: stacktrace && stacktrace.frames && stacktrace.frames.map(f => this._iteratee(f)),\n    };\n  }\n}\n"],"names":["splitPathRe","resolve","args","resolvedPath","resolvedAbsolute","i","length","path","charAt","parts","allowAboveRoot","up","last","splice","unshift","normalizeArray","split","filter","p","join","trim","arr","start","end","slice","basename","ext","f","filename","exec","splitPath","substr","RewriteFrames","constructor","options","this","id","frame","isWindowsFrame","test","startsWithSlash","replace","base","_root","from","to","fromParts","toParts","Math","min","samePartsLength","outputParts","push","concat","relative","_prefix","root","prefix","iteratee","_iteratee","setupOnce","addGlobalEventProcessor","getCurrentHub","event","self","getIntegration","process","originalEvent","processedEvent","exception","Array","isArray","values","_processExceptionsEvent","stacktrace","_processStacktraceEvent","map","value","_processStacktrace","_oO","frames"],"mappings":"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"}