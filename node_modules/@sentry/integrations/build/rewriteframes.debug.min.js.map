{"version":3,"file":"rewriteframes.debug.min.js","sources":["../../utils/src/path.ts","../src/rewriteframes.ts"],"sourcesContent":["// Slightly modified (no IE8 support, ES6) and transcribed to TypeScript\n// https://raw.githubusercontent.com/calvinmetcalf/rollup-plugin-node-builtins/master/src/es6/path.js\n\n/** JSDoc */\nfunction normalizeArray(parts: string[], allowAboveRoot?: boolean): string[] {\n  // if the path tries to go above the root, `up` ends up > 0\n  let up = 0;\n  for (let i = parts.length - 1; i >= 0; i--) {\n    const last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      // eslint-disable-next-line no-plusplus\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      // eslint-disable-next-line no-plusplus\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    // eslint-disable-next-line no-plusplus\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nconst splitPathRe = /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^/]+?|)(\\.[^./]*|))(?:[/]*)$/;\n/** JSDoc */\nfunction splitPath(filename: string): string[] {\n  const parts = splitPathRe.exec(filename);\n  return parts ? parts.slice(1) : [];\n}\n\n// path.resolve([from ...], to)\n// posix version\n/** JSDoc */\nexport function resolve(...args: string[]): string {\n  let resolvedPath = '';\n  let resolvedAbsolute = false;\n\n  for (let i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    const path = i >= 0 ? args[i] : '/';\n\n    // Skip empty entries\n    if (!path) {\n      continue;\n    }\n\n    resolvedPath = `${path}/${resolvedPath}`;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(\n    resolvedPath.split('/').filter(p => !!p),\n    !resolvedAbsolute,\n  ).join('/');\n\n  return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';\n}\n\n/** JSDoc */\nfunction trim(arr: string[]): string[] {\n  let start = 0;\n  for (; start < arr.length; start++) {\n    if (arr[start] !== '') {\n      break;\n    }\n  }\n\n  let end = arr.length - 1;\n  for (; end >= 0; end--) {\n    if (arr[end] !== '') {\n      break;\n    }\n  }\n\n  if (start > end) {\n    return [];\n  }\n  return arr.slice(start, end - start + 1);\n}\n\n// path.relative(from, to)\n// posix version\n/** JSDoc */\nexport function relative(from: string, to: string): string {\n  /* eslint-disable no-param-reassign */\n  from = resolve(from).substr(1);\n  to = resolve(to).substr(1);\n  /* eslint-enable no-param-reassign */\n\n  const fromParts = trim(from.split('/'));\n  const toParts = trim(to.split('/'));\n\n  const length = Math.min(fromParts.length, toParts.length);\n  let samePartsLength = length;\n  for (let i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  let outputParts = [];\n  for (let i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n}\n\n// path.normalize(path)\n// posix version\n/** JSDoc */\nexport function normalizePath(path: string): string {\n  const isPathAbsolute = isAbsolute(path);\n  const trailingSlash = path.substr(-1) === '/';\n\n  // Normalize the path\n  let normalizedPath = normalizeArray(\n    path.split('/').filter(p => !!p),\n    !isPathAbsolute,\n  ).join('/');\n\n  if (!normalizedPath && !isPathAbsolute) {\n    normalizedPath = '.';\n  }\n  if (normalizedPath && trailingSlash) {\n    normalizedPath += '/';\n  }\n\n  return (isPathAbsolute ? '/' : '') + normalizedPath;\n}\n\n// posix version\n/** JSDoc */\nexport function isAbsolute(path: string): boolean {\n  return path.charAt(0) === '/';\n}\n\n// posix version\n/** JSDoc */\nexport function join(...args: string[]): string {\n  return normalizePath(args.join('/'));\n}\n\n/** JSDoc */\nexport function dirname(path: string): string {\n  const result = splitPath(path);\n  const root = result[0];\n  let dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n}\n\n/** JSDoc */\nexport function basename(path: string, ext?: string): string {\n  let f = splitPath(path)[2];\n  if (ext && f.substr(ext.length * -1) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n}\n","import { Event, EventProcessor, Hub, Integration, StackFrame, Stacktrace } from '@sentry/types';\nimport { basename, relative } from '@sentry/utils';\n\ntype StackFrameIteratee = (frame: StackFrame) => StackFrame;\n\n/** Rewrite event frames paths */\nexport class RewriteFrames implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'RewriteFrames';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = RewriteFrames.id;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _root?: string;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _prefix: string = 'app:///';\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { root?: string; prefix?: string; iteratee?: StackFrameIteratee } = {}) {\n    if (options.root) {\n      this._root = options.root;\n    }\n    if (options.prefix) {\n      this._prefix = options.prefix;\n    }\n    if (options.iteratee) {\n      this._iteratee = options.iteratee;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    addGlobalEventProcessor(event => {\n      const self = getCurrentHub().getIntegration(RewriteFrames);\n      if (self) {\n        return self.process(event);\n      }\n      return event;\n    });\n  }\n\n  /** JSDoc */\n  public process(originalEvent: Event): Event {\n    let processedEvent = originalEvent;\n\n    if (originalEvent.exception && Array.isArray(originalEvent.exception.values)) {\n      processedEvent = this._processExceptionsEvent(processedEvent);\n    }\n\n    if (originalEvent.stacktrace) {\n      processedEvent = this._processStacktraceEvent(processedEvent);\n    }\n\n    return processedEvent;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _iteratee: StackFrameIteratee = (frame: StackFrame) => {\n    if (!frame.filename) {\n      return frame;\n    }\n    // Check if the frame filename begins with `/` or a Windows-style prefix such as `C:\\`\n    const isWindowsFrame = /^[A-Z]:\\\\/.test(frame.filename);\n    const startsWithSlash = /^\\//.test(frame.filename);\n    if (isWindowsFrame || startsWithSlash) {\n      const filename = isWindowsFrame\n        ? frame.filename\n            .replace(/^[A-Z]:/, '') // remove Windows-style prefix\n            .replace(/\\\\/g, '/') // replace all `\\\\` instances with `/`\n        : frame.filename;\n      const base = this._root ? relative(this._root, filename) : basename(filename);\n      frame.filename = `${this._prefix}${base}`;\n    }\n    return frame;\n  };\n\n  /** JSDoc */\n  private _processExceptionsEvent(event: Event): Event {\n    try {\n      return {\n        ...event,\n        exception: {\n          ...event.exception,\n          // The check for this is performed inside `process` call itself, safe to skip here\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          values: event.exception!.values!.map(value => ({\n            ...value,\n            stacktrace: this._processStacktrace(value.stacktrace),\n          })),\n        },\n      };\n    } catch (_oO) {\n      return event;\n    }\n  }\n\n  /** JSDoc */\n  private _processStacktraceEvent(event: Event): Event {\n    try {\n      return {\n        ...event,\n        stacktrace: this._processStacktrace(event.stacktrace),\n      };\n    } catch (_oO) {\n      return event;\n    }\n  }\n\n  /** JSDoc */\n  private _processStacktrace(stacktrace?: Stacktrace): Stacktrace {\n    return {\n      ...stacktrace,\n      frames: stacktrace && stacktrace.frames && stacktrace.frames.map(f => this._iteratee(f)),\n    };\n  }\n}\n"],"names":["normalizeArray","parts","allowAboveRoot","up","i","length","last","splice","unshift","splitPathRe","resolve","_i","args","resolvedPath","resolvedAbsolute","path","charAt","split","filter","p","join","trim","arr","start","end","slice","basename","ext","filename","f","exec","substr","options","this","RewriteFrames","id","frame","isWindowsFrame","test","startsWithSlash","replace","base","_this","_root","from","to","fromParts","toParts","Math","min","samePartsLength","outputParts","push","concat","relative","_prefix","root","prefix","iteratee","_iteratee","addGlobalEventProcessor","getCurrentHub","event","self","getIntegration","process","originalEvent","processedEvent","exception","Array","isArray","values","_processExceptionsEvent","stacktrace","_processStacktraceEvent","map","value","_processStacktrace","_oO","frames"],"mappings":"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"}