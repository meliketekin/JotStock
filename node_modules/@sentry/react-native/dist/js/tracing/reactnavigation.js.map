{"version":3,"file":"reactnavigation.js","sourceRoot":"","sources":["../../../src/js/tracing/reactnavigation.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable max-lines */\nimport { Transaction as TransactionType } from '@sentry/types';\nimport { getGlobalObject, logger } from '@sentry/utils';\n\nimport {\n  InternalRoutingInstrumentation,\n  OnConfirmRoute,\n  TransactionCreator,\n} from './routingInstrumentation';\nimport {\n  BeforeNavigate,\n  ReactNavigationTransactionContext,\n  RouteChangeContextData,\n} from './types';\nimport { getBlankTransactionContext } from './utils';\n\nexport interface NavigationRoute {\n  name: string;\n  key: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  params?: Record<string, any>;\n}\n\ninterface NavigationContainer {\n  addListener: (type: string, listener: () => void) => void;\n  getCurrentRoute: () => NavigationRoute;\n}\n\ninterface ReactNavigationOptions {\n  /**\n   * The time the transaction will wait for route to mount before it is discarded.\n   */\n  routeChangeTimeoutMs: number;\n}\n\nconst defaultOptions: ReactNavigationOptions = {\n  routeChangeTimeoutMs: 1000,\n};\n\n/**\n * Instrumentation for React-Navigation V5 and above. See docs or sample app for usage.\n *\n * How this works:\n * - `_onDispatch` is called every time a dispatch happens and sets an IdleTransaction on the scope without any route context.\n * - `_onStateChange` is then called AFTER the state change happens due to a dispatch and sets the route context onto the active transaction.\n * - If `_onStateChange` isn't called within `STATE_CHANGE_TIMEOUT_DURATION` of the dispatch, then the transaction is not sampled and finished.\n */\nexport class ReactNavigationInstrumentation extends InternalRoutingInstrumentation {\n  public static instrumentationName: string = 'react-navigation-v5';\n\n  private _navigationContainer: NavigationContainer | null = null;\n\n  private readonly _maxRecentRouteLen: number = 200;\n\n  private _latestRoute?: NavigationRoute;\n  private _latestTransaction?: TransactionType;\n  private _initialStateHandled: boolean = false;\n  private _stateChangeTimeout?: number | undefined;\n  private _recentRouteKeys: string[] = [];\n\n  private _options: ReactNavigationOptions;\n\n  public constructor(options: Partial<ReactNavigationOptions> = {}) {\n    super();\n\n    this._options = {\n      ...defaultOptions,\n      ...options,\n    };\n  }\n\n  /**\n   * Extends by calling _handleInitialState at the end.\n   */\n  public registerRoutingInstrumentation(\n    listener: TransactionCreator,\n    beforeNavigate: BeforeNavigate,\n    onConfirmRoute: OnConfirmRoute\n  ): void {\n    super.registerRoutingInstrumentation(\n      listener,\n      beforeNavigate,\n      onConfirmRoute\n    );\n\n    // We create an initial state here to ensure a transaction gets created before the first route mounts.\n    if (!this._initialStateHandled) {\n      this._onDispatch();\n      if (this._navigationContainer) {\n        // Navigation container already registered, just populate with route state\n        this._onStateChange();\n\n        this._initialStateHandled = true;\n      }\n    }\n  }\n\n  /**\n   * Pass the ref to the navigation container to register it to the instrumentation\n   * @param navigationContainerRef Ref to a `NavigationContainer`\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public registerNavigationContainer(navigationContainerRef: any): void {\n    const _global = getGlobalObject<{ __sentry_rn_v5_registered?: boolean }>();\n\n    /* We prevent duplicate routing instrumentation to be initialized on fast refreshes\n\n      Explanation: If the user triggers a fast refresh on the file that the instrumentation is\n      initialized in, it will initialize a new instance and will cause undefined behavior.\n     */\n    if (!_global.__sentry_rn_v5_registered) {\n      if ('current' in navigationContainerRef) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        this._navigationContainer = navigationContainerRef.current;\n      } else {\n        this._navigationContainer = navigationContainerRef;\n      }\n\n      if (this._navigationContainer) {\n        this._navigationContainer.addListener(\n          '__unsafe_action__', // This action is emitted on every dispatch\n          this._onDispatch.bind(this)\n        );\n        this._navigationContainer.addListener(\n          'state', // This action is emitted on every state change\n          this._onStateChange.bind(this)\n        );\n\n        if (!this._initialStateHandled) {\n          if (this._latestTransaction) {\n            // If registerRoutingInstrumentation was called first _onDispatch has already been called\n            this._onStateChange();\n\n            this._initialStateHandled = true;\n          } else {\n            logger.log(\n              '[ReactNavigationInstrumentation] Navigation container registered, but integration has not been setup yet.'\n            );\n          }\n        }\n\n        _global.__sentry_rn_v5_registered = true;\n      } else {\n        logger.warn(\n          '[ReactNavigationInstrumentation] Received invalid navigation container ref!'\n        );\n      }\n    } else {\n      logger.log(\n        '[ReactNavigationInstrumentation] Instrumentation already exists, but register has been called again, doing nothing.'\n      );\n    }\n  }\n\n  /**\n   * To be called on every React-Navigation action dispatch.\n   * It does not name the transaction or populate it with route information. Instead, it waits for the state to fully change\n   * and gets the route information from there, @see _onStateChange\n   */\n  private _onDispatch(): void {\n    if (this._latestTransaction) {\n      logger.log(\n        '[ReactNavigationInstrumentation] A transaction was detected that turned out to be a noop, discarding.'\n      );\n      this._discardLatestTransaction();\n      this._clearStateChangeTimeout();\n    }\n\n    this._latestTransaction = this.onRouteWillChange(\n      getBlankTransactionContext(\n        ReactNavigationInstrumentation.instrumentationName\n      )\n    );\n\n    this._stateChangeTimeout = setTimeout(\n      this._discardLatestTransaction.bind(this),\n      this._options.routeChangeTimeoutMs\n    );\n  }\n\n  /**\n   * To be called AFTER the state has been changed to populate the transaction with the current route.\n   */\n  private _onStateChange(): void {\n    // Use the getCurrentRoute method to be accurate.\n    const previousRoute = this._latestRoute;\n\n    if (!this._navigationContainer) {\n      logger.warn(\n        '[ReactNavigationInstrumentation] Missing navigation container ref. Route transactions will not be sent.'\n      );\n\n      return;\n    }\n\n    const route = this._navigationContainer.getCurrentRoute();\n\n    if (route) {\n      if (this._latestTransaction) {\n        if (!previousRoute || previousRoute.key !== route.key) {\n          const originalContext = this._latestTransaction.toContext() as typeof BLANK_TRANSACTION_CONTEXT;\n          const routeHasBeenSeen = this._recentRouteKeys.includes(route.key);\n\n          const data: RouteChangeContextData = {\n            ...originalContext.data,\n            route: {\n              name: route.name,\n              key: route.key,\n              params: route.params ?? {},\n              hasBeenSeen: routeHasBeenSeen,\n            },\n            previousRoute: previousRoute\n              ? {\n                  name: previousRoute.name,\n                  key: previousRoute.key,\n                  params: previousRoute.params ?? {},\n                }\n              : null,\n          };\n\n          const updatedContext: ReactNavigationTransactionContext = {\n            ...originalContext,\n            name: route.name,\n            tags: {\n              ...originalContext.tags,\n              'routing.route.name': route.name,\n            },\n            data,\n          };\n\n          let finalContext = this._beforeNavigate?.(updatedContext);\n\n          // This block is to catch users not returning a transaction context\n          if (!finalContext) {\n            logger.error(\n              `[ReactNavigationInstrumentation] beforeNavigate returned ${finalContext}, return context.sampled = false to not send transaction.`\n            );\n\n            finalContext = {\n              ...updatedContext,\n              sampled: false,\n            };\n          }\n\n          // Note: finalContext.sampled will be false at this point only if the user sets it to be so in beforeNavigate.\n          if (finalContext.sampled === false) {\n            logger.log(\n              `[ReactNavigationInstrumentation] Will not send transaction \"${finalContext.name}\" due to beforeNavigate.`\n            );\n          } else {\n            // Clear the timeout so the transaction does not get cancelled.\n            this._clearStateChangeTimeout();\n          }\n\n          this._latestTransaction.updateWithContext(finalContext);\n          this._onConfirmRoute?.(finalContext);\n        }\n\n        this._pushRecentRouteKey(route.key);\n        this._latestRoute = route;\n      }\n    }\n\n    // Clear the latest transaction as it has been handled.\n    this._latestTransaction = undefined;\n  }\n\n  /** Pushes a recent route key, and removes earlier routes when there is greater than the max length */\n  private _pushRecentRouteKey = (key: string): void => {\n    this._recentRouteKeys.push(key);\n\n    if (this._recentRouteKeys.length > this._maxRecentRouteLen) {\n      this._recentRouteKeys = this._recentRouteKeys.slice(\n        this._recentRouteKeys.length - this._maxRecentRouteLen\n      );\n    }\n  };\n\n  /** Cancels the latest transaction so it does not get sent to Sentry. */\n  private _discardLatestTransaction(): void {\n    if (this._latestTransaction) {\n      this._latestTransaction.sampled = false;\n      this._latestTransaction.finish();\n      this._latestTransaction = undefined;\n    }\n  }\n\n  /**\n   *\n   */\n  private _clearStateChangeTimeout(): void {\n    if (typeof this._stateChangeTimeout !== 'undefined') {\n      clearTimeout(this._stateChangeTimeout);\n      this._stateChangeTimeout = undefined;\n    }\n  }\n}\n\n/**\n * Backwards compatibility alias for ReactNavigationInstrumentation\n * @deprecated Use ReactNavigationInstrumentation\n */\nexport const ReactNavigationV5Instrumentation = ReactNavigationInstrumentation;\n\nexport const BLANK_TRANSACTION_CONTEXT = {\n  name: 'Route Change',\n  op: 'navigation',\n  tags: {\n    'routing.instrumentation':\n      ReactNavigationInstrumentation.instrumentationName,\n  },\n  data: {},\n};\n"]}