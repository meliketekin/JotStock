{"version":3,"file":"reactnativenavigation.js","sourceRoot":"","sources":["../../../src/js/tracing/reactnativenavigation.ts"],"names":[],"mappings":"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","sourcesContent":["import { Transaction as TransactionType } from '@sentry/types';\nimport { logger } from '@sentry/utils';\nimport { EmitterSubscription } from 'react-native';\n\nimport {\n  InternalRoutingInstrumentation,\n  OnConfirmRoute,\n  TransactionCreator,\n} from './routingInstrumentation';\nimport { BeforeNavigate, RouteChangeContextData } from './types';\nimport { getBlankTransactionContext } from './utils';\n\ninterface ReactNativeNavigationOptions {\n  routeChangeTimeoutMs: number;\n}\n\nconst defaultOptions: ReactNativeNavigationOptions = {\n  routeChangeTimeoutMs: 1000,\n};\n\ninterface ComponentEvent {\n  componentId: string;\n}\n\ntype ComponentType =\n  | 'Component'\n  | 'TopBarTitle'\n  | 'TopBarBackground'\n  | 'TopBarButton';\n\nexport interface ComponentWillAppearEvent extends ComponentEvent {\n  componentName: string;\n  passProps?: Record<string | number | symbol, unknown>;\n  componentType: ComponentType;\n}\n\nexport interface EventSubscription {\n  remove(): void;\n}\n\nexport interface EventsRegistry {\n  registerComponentWillAppearListener(\n    callback: (event: ComponentWillAppearEvent) => void\n  ): EmitterSubscription;\n  registerCommandListener(\n    callback: (name: string, params: unknown) => void\n  ): EventSubscription;\n}\n\nexport interface NavigationDelegate {\n  events: () => EventsRegistry;\n}\n\n/**\n * Instrumentation for React Native Navigation. See docs or sample app for usage.\n *\n * How this works:\n * - `_onCommand` is called every time a commands happens and sets an IdleTransaction on the scope without any route context.\n * - `_onComponentWillAppear` is then called AFTER the state change happens due to a dispatch and sets the route context onto the active transaction.\n * - If `_onComponentWillAppear` isn't called within `options.routeChangeTimeoutMs` of the dispatch, then the transaction is not sampled and finished.\n */\nexport class ReactNativeNavigationInstrumentation extends InternalRoutingInstrumentation {\n  public static instrumentationName: string = 'react-native-navigation';\n\n  private _navigation: NavigationDelegate;\n  private _options: ReactNativeNavigationOptions;\n\n  private _prevComponentEvent: ComponentWillAppearEvent | null = null;\n\n  private _latestTransaction?: TransactionType;\n  private _recentComponentIds: string[] = [];\n  private _stateChangeTimeout?: number | undefined;\n\n  public constructor(\n    /** The react native navigation `NavigationDelegate`. This is usually the import named `Navigation`. */\n    navigation: unknown,\n    options: Partial<ReactNativeNavigationOptions> = {}\n  ) {\n    super();\n\n    this._navigation = navigation as NavigationDelegate;\n\n    this._options = {\n      ...defaultOptions,\n      ...options,\n    };\n  }\n\n  /**\n   * Registers the event listeners for React Native Navigation\n   */\n  public registerRoutingInstrumentation(\n    listener: TransactionCreator,\n    beforeNavigate: BeforeNavigate,\n    onConfirmRoute: OnConfirmRoute\n  ): void {\n    super.registerRoutingInstrumentation(\n      listener,\n      beforeNavigate,\n      onConfirmRoute\n    );\n\n    this._navigation\n      .events()\n      .registerCommandListener(this._onCommand.bind(this));\n\n    this._navigation\n      .events()\n      .registerComponentWillAppearListener(\n        this._onComponentWillAppear.bind(this)\n      );\n  }\n\n  /**\n   * To be called when a navigation command is dispatched\n   */\n  private _onCommand(): void {\n    if (this._latestTransaction) {\n      this._discardLatestTransaction();\n    }\n\n    this._latestTransaction = this.onRouteWillChange(\n      getBlankTransactionContext(ReactNativeNavigationInstrumentation.name)\n    );\n\n    this._stateChangeTimeout = setTimeout(\n      this._discardLatestTransaction.bind(this),\n      this._options.routeChangeTimeoutMs\n    );\n  }\n\n  /**\n   * To be called AFTER the state has been changed to populate the transaction with the current route.\n   */\n  private _onComponentWillAppear(event: ComponentWillAppearEvent): void {\n    // If the route is a different key, this is so we ignore actions that pertain to the same screen.\n    if (this._latestTransaction) {\n      if (\n        !this._prevComponentEvent ||\n        event.componentId != this._prevComponentEvent.componentId\n      ) {\n        this._clearStateChangeTimeout();\n\n        const originalContext = this._latestTransaction.toContext();\n        const routeHasBeenSeen = this._recentComponentIds.includes(\n          event.componentId\n        );\n\n        const data: RouteChangeContextData = {\n          ...originalContext.data,\n          route: {\n            ...event,\n            name: event.componentName,\n            hasBeenSeen: routeHasBeenSeen,\n          },\n          previousRoute: this._prevComponentEvent\n            ? {\n                ...this._prevComponentEvent,\n                name: this._prevComponentEvent?.componentName,\n              }\n            : null,\n        };\n\n        const updatedContext = {\n          ...originalContext,\n          name: event.componentName,\n          tags: {\n            ...originalContext.tags,\n            'routing.route.name': event.componentName,\n          },\n          data,\n        };\n\n        let finalContext = this._beforeNavigate?.(updatedContext);\n\n        // This block is to catch users not returning a transaction context\n        if (!finalContext) {\n          logger.error(\n            `[${ReactNativeNavigationInstrumentation.name}] beforeNavigate returned ${finalContext}, return context.sampled = false to not send transaction.`\n          );\n\n          finalContext = {\n            ...updatedContext,\n            sampled: false,\n          };\n        }\n\n        if (finalContext.sampled === false) {\n          logger.log(\n            `[${ReactNativeNavigationInstrumentation.name}] Will not send transaction \"${finalContext.name}\" due to beforeNavigate.`\n          );\n        }\n\n        this._latestTransaction.updateWithContext(finalContext);\n        this._onConfirmRoute?.(finalContext);\n\n        this._prevComponentEvent = event;\n      } else {\n        this._discardLatestTransaction();\n      }\n\n      this._latestTransaction = undefined;\n    }\n  }\n\n  /** Cancels the latest transaction so it does not get sent to Sentry. */\n  private _discardLatestTransaction(): void {\n    if (this._latestTransaction) {\n      this._latestTransaction.sampled = false;\n      this._latestTransaction.finish();\n      this._latestTransaction = undefined;\n    }\n\n    this._clearStateChangeTimeout();\n  }\n\n  /** Cancels the latest transaction so it does not get sent to Sentry. */\n  private _clearStateChangeTimeout(): void {\n    if (typeof this._stateChangeTimeout !== 'undefined') {\n      clearTimeout(this._stateChangeTimeout);\n      this._stateChangeTimeout = undefined;\n    }\n  }\n}\n"]}