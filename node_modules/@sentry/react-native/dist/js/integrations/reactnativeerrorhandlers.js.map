{"version":3,"file":"reactnativeerrorhandlers.js","sourceRoot":"","sources":["../../../src/js/integrations/reactnativeerrorhandlers.ts"],"names":[],"mappings":"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","sourcesContent":["import { eventFromException } from '@sentry/browser';\nimport { getCurrentHub } from '@sentry/core';\nimport { Integration, Severity } from '@sentry/types';\nimport { addExceptionMechanism, getGlobalObject, logger } from '@sentry/utils';\n\nimport { ReactNativeClient } from '../client';\n\n/** ReactNativeErrorHandlers Options */\ninterface ReactNativeErrorHandlersOptions {\n  onerror: boolean;\n  onunhandledrejection: boolean;\n  patchGlobalPromise: boolean;\n}\n\ninterface PromiseRejectionTrackingOptions {\n  onUnhandled: (id: string, error: unknown) => void;\n  onHandled: (id: string) => void;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const global: any;\n\n/** ReactNativeErrorHandlers Integration */\nexport class ReactNativeErrorHandlers implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'ReactNativeErrorHandlers';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = ReactNativeErrorHandlers.id;\n\n  /** ReactNativeOptions */\n  private readonly _options: ReactNativeErrorHandlersOptions;\n\n  /** Constructor */\n  public constructor(options?: Partial<ReactNativeErrorHandlersOptions>) {\n    this._options = {\n      onerror: true,\n      onunhandledrejection: true,\n      patchGlobalPromise: true,\n      ...options,\n    };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    this._handleUnhandledRejections();\n    this._handleOnError();\n  }\n\n  /**\n   * Handle Promises\n   */\n  private _handleUnhandledRejections(): void {\n    if (this._options.onunhandledrejection) {\n      if (this._options.patchGlobalPromise) {\n        this._polyfillPromise();\n      }\n\n      this._attachUnhandledRejectionHandler();\n      this._checkPromiseAndWarn();\n    }\n  }\n  /**\n   * Polyfill the global promise instance with one we can be sure that we can attach the tracking to.\n   *\n   * In newer RN versions >=0.63, the global promise is not the same reference as the one imported from the promise library.\n   * This is due to a version mismatch between promise versions.\n   * Originally we tried a solution where we would have you put a package resolution to ensure the promise instances match. However,\n   * - Using a package resolution requires the you to manually troubleshoot.\n   * - The package resolution fix no longer works with 0.67 on iOS Hermes.\n   */\n  private _polyfillPromise(): void {\n    /* eslint-disable import/no-extraneous-dependencies,@typescript-eslint/no-var-requires */\n    const {\n      polyfillGlobal,\n    } = require('react-native/Libraries/Utilities/PolyfillFunctions');\n\n    // Below, we follow the exact way React Native initializes its promise library, and we globally replace it.\n    const Promise = require('promise/setimmediate/es6-extensions');\n\n    // As of RN 0.67 only done and finally are used\n    require('promise/setimmediate/done');\n    require('promise/setimmediate/finally');\n\n    polyfillGlobal('Promise', () => Promise);\n    /* eslint-enable import/no-extraneous-dependencies,@typescript-eslint/no-var-requires */\n  }\n  /**\n   * Attach the unhandled rejection handler\n   */\n  private _attachUnhandledRejectionHandler(): void {\n    const tracking: {\n      disable: () => void;\n      enable: (arg: unknown) => void;\n      // eslint-disable-next-line import/no-extraneous-dependencies,@typescript-eslint/no-var-requires\n    } = require('promise/setimmediate/rejection-tracking');\n\n    const promiseRejectionTrackingOptions: PromiseRejectionTrackingOptions = {\n      onUnhandled: (id, rejection = {}) => {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `Possible Unhandled Promise Rejection (id: ${id}):\\n${rejection}`\n        );\n      },\n      onHandled: (id) => {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `Promise Rejection Handled (id: ${id})\\n` +\n            'This means you can ignore any previous messages of the form ' +\n            `\"Possible Unhandled Promise Rejection (id: ${id}):\"`\n        );\n      },\n    };\n\n    tracking.enable({\n      allRejections: true,\n      onUnhandled: (id: string, error: Error) => {\n        if (__DEV__) {\n          promiseRejectionTrackingOptions.onUnhandled(id, error);\n        }\n\n        getCurrentHub().captureException(error, {\n          data: { id },\n          originalException: error,\n        });\n      },\n      onHandled: (id: string) => {\n        promiseRejectionTrackingOptions.onHandled(id);\n      },\n    });\n  }\n  /**\n   * Checks if the promise is the same one or not, if not it will warn the user\n   */\n  private _checkPromiseAndWarn(): void {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires,import/no-extraneous-dependencies\n      const Promise = require('promise/setimmediate/es6-extensions');\n\n      const _global = getGlobalObject<{ Promise: typeof Promise }>();\n\n      if (Promise !== _global.Promise) {\n        logger.warn(\n          'Unhandled promise rejections will not be caught by Sentry. Read about how to fix this on our troubleshooting page.'\n        );\n      } else {\n        logger.log('Unhandled promise rejections will be caught by Sentry.');\n      }\n    } catch (e) {\n      // Do Nothing\n      logger.warn(\n        'Unhandled promise rejections will not be caught by Sentry. Read about how to fix this on our troubleshooting page.'\n      );\n    }\n  }\n  /**\n   * Handle errors\n   */\n  private _handleOnError(): void {\n    if (this._options.onerror) {\n      let handlingFatal = false;\n\n      const defaultHandler =\n        ErrorUtils.getGlobalHandler && ErrorUtils.getGlobalHandler();\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      ErrorUtils.setGlobalHandler(async (error: any, isFatal?: boolean) => {\n        // We want to handle fatals, but only in production mode.\n        const shouldHandleFatal = isFatal && !__DEV__;\n        if (shouldHandleFatal) {\n          if (handlingFatal) {\n            logger.log(\n              'Encountered multiple fatals in a row. The latest:',\n              error\n            );\n            return;\n          }\n          handlingFatal = true;\n        }\n\n        const currentHub = getCurrentHub();\n        const client = currentHub.getClient<ReactNativeClient>();\n\n        if (!client) {\n          logger.error(\n            'Sentry client is missing, the error event might be lost.',\n            error\n          );\n\n          // If there is no client something is fishy, anyway we call the default handler\n          defaultHandler(error, isFatal);\n\n          return;\n        }\n\n        const options = client.getOptions();\n\n        const event = await eventFromException(error, {\n          originalException: error,\n        }, options.attachStacktrace);\n\n        if (isFatal) {\n          event.level = Severity.Fatal;\n\n          addExceptionMechanism(event, {\n            handled: false,\n            type: 'onerror',\n          });\n        }\n\n        currentHub.captureEvent(event);\n\n        if (!__DEV__) {\n          void client.flush(options.shutdownTimeout || 2000).then(() => {\n            defaultHandler(error, isFatal);\n          });\n        } else {\n          // If in dev, we call the default handler anyway and hope the error will be sent\n          // Just for a better dev experience\n          defaultHandler(error, isFatal);\n        }\n      });\n    }\n  }\n}\n"]}