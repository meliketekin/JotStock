{"version":3,"file":"options.js","sourceRoot":"","sources":["../../src/js/options.ts"],"names":[],"mappings":"","sourcesContent":["import { BrowserOptions } from '@sentry/react';\nimport { ProfilerProps } from '@sentry/react/dist/profiler';\nimport { CaptureContext } from '@sentry/types/dist/scope';\n\nimport { TouchEventBoundaryProps } from './touchevents';\n\n/**\n * Configuration options for the Sentry ReactNative SDK.\n * @see ReactNativeFrontend for more information.\n */\n\nexport interface ReactNativeOptions extends BrowserOptions {\n  /**\n   * Enables native transport + device info + offline caching.\n   * Be careful, disabling this also breaks automatic release setting.\n   * This means you have to manage setting the release yourself.\n   * Defaults to `true`.\n   */\n  enableNative?: boolean;\n\n  /**\n   * Enables native crashHandling. This only works if `enableNative` is `true`.\n   * Defaults to `true`.\n   */\n  enableNativeCrashHandling?: boolean;\n\n  /**\n   * Initializes the native SDK on init.\n   * Set this to `false` if you have an existing native SDK and don't want to re-initialize.\n   *\n   * NOTE: Be careful and only use this if you know what you are doing.\n   * If you use this flag, make sure a native SDK is running before the JS Engine initializes or events might not be captured.\n   * Also, make sure the DSN on both the React Native side and the native side are the same one.\n   * We strongly recommend checking the documentation if you need to use this.\n   *\n   * @default true\n   */\n  autoInitializeNativeSdk?: boolean;\n\n  /** Should the native nagger alert be shown or not. */\n  enableNativeNagger?: boolean;\n\n  /** Should sessions be tracked to Sentry Health or not. */\n  enableAutoSessionTracking?: boolean;\n\n  /** The interval to end a session if the App goes to the background. */\n  sessionTrackingIntervalMillis?: number;\n\n  /** Enable scope sync from Java to NDK on Android */\n  enableNdkScopeSync?: boolean;\n\n  /** When enabled, all the threads are automatically attached to all logged events on Android */\n  attachThreads?: boolean;\n\n  /**\n   *  When enabled, certain personally identifiable information (PII) is added by active integrations.\n   *\n   * @default false\n   * */\n  sendDefaultPii?: boolean;\n\n  /**\n   * Callback that is called after the RN SDK on the JS Layer has made contact with the Native Layer.\n   */\n  onReady?: (response: {\n    /** `true` if the native SDK has been initialized, `false` otherwise.  */\n    didCallNativeInit: boolean;\n  }) => void;\n\n  /** Enable auto performance tracking by default. */\n  enableAutoPerformanceTracking?: boolean;\n\n  /**\n   * Enables Out of Memory Tracking for iOS and macCatalyst.\n   * See the following link for more information and possible restrictions:\n   * https://docs.sentry.io/platforms/apple/guides/ios/configuration/out-of-memory/\n   *\n   * @default true\n   * */\n  enableOutOfMemoryTracking?: boolean;\n\n  /**\n   * Set data to the inital scope\n   * @deprecated Use `Sentry.configureScope(...)`\n   */\n  initialScope?: CaptureContext;\n\n  /**\n   * When enabled, Sentry will overwrite the global Promise instance to ensure that unhandled rejections are correctly tracked.\n   * If you run into issues with Promise polyfills such as `core-js`, make sure you polyfill after Sentry is initialized.\n   * Read more at https://docs.sentry.io/platforms/react-native/troubleshooting/#unhandled-promise-rejections\n   *\n   * When disabled, this option will not disable unhandled rejection tracking. Set `onunhandledrejection: false` on the `ReactNativeErrorHandlers` integration instead.\n   * @default true\n   */\n  patchGlobalPromise?: boolean;\n\n    /**\n   * The max cache items for capping the number of envelopes.\n   *\n   * @default 30\n   */\n  maxCacheItems?: number;\n}\n\nexport interface ReactNativeWrapperOptions {\n  /** Props for the root React profiler */\n  profilerProps?: ProfilerProps;\n\n  /** Props for the root touch event boundary */\n  touchEventBoundaryProps?: TouchEventBoundaryProps;\n}\n"]}