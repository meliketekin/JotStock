{"version":3,"file":"measurements.js","sourceRoot":"","sources":["../../src/js/measurements.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,cAAc,EAAO,MAAM,aAAa,CAAC;AAIjE,OAAO,EAAE,kBAAkB,EAAE,MAAM,WAAW,CAAC;AAE/C;;GAEG;AACH,MAAM,UAAU,qBAAqB;IACnC,MAAM,OAAO,GAAG,cAAc,EAAE,CAAC;IACjC,IAAI,OAAO,CAAC,UAAU,EAAE;QACtB,OAAO,CAAC,UAAU,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC,UAAU,IAAI,EAAE,CAAC;QACpE,IAAI,OAAO,CAAC,UAAU,CAAC,UAAU,CAAC,gBAAgB,EAAE;YAClD,MAAM,wBAAwB,GAAG,OAAO,CAAC,UAAU,CAAC,UAAU;iBAC3D,gBAA4C,CAAC;YAEhD;;;cAGE;YACF,MAAM,iBAAiB,GAAG,sBAAsB,CAC9C,wBAAwB,CACzB,CAAC;YAEF,OAAO,CAAC,UAAU,CAAC,UAAU,CAAC,gBAAgB,GAAG,iBAAiB,CAAC;SACpE;KACF;AACH,CAAC;AAQD;;GAEG;AACH,MAAM,sBAAsB,GAAG,CAC7B,wBAAkD,EACxB,EAAE;IAC5B;;OAEG;IACH,SAAS,iBAAiB,CAExB,kBAAsC,EACtC,qBAA6C;QAE7C,MAAM,WAAW,GAAgB,wBAAwB,CAAC,KAAK,CAAC,IAAI,EAAE;YACpE,kBAAkB;YAClB,qBAAqB;SACtB,CAAC,CAAC;QAEH,MAAM,kBAAkB,GAAG,aAAa,EAAE,CAAC,cAAc,CACvD,kBAAkB,CACnB,CAAC;QAEF,IAAI,kBAAkB,EAAE;YACtB,kBAAkB,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;YAEnD,6DAA6D;YAC7D,MAAM,cAAc,GAAG,WAAW,CAAC,MAAM,CAAC;YAE1C,WAAW,CAAC,MAAM,GAAG,CAAC,YAAgC,EAAE,EAAE;gBACxD,IAAI,kBAAkB,EAAE;oBACtB,kBAAkB,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC;iBACrD;gBAED,OAAO,cAAc,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC;YAC3D,CAAC,CAAC;SACH;QAED,OAAO,WAAW,CAAC;IACrB,CAAC;IAED,OAAO,iBAAiB,CAAC;AAC3B,CAAC,CAAC","sourcesContent":["import { getCurrentHub, getMainCarrier, Hub } from '@sentry/hub';\nimport { Transaction } from '@sentry/tracing';\nimport { CustomSamplingContext, TransactionContext } from '@sentry/types';\n\nimport { ReactNativeTracing } from './tracing';\n\n/**\n * Adds React Native's extensions. Needs to be called after @sentry/tracing's extension methods are added\n */\nexport function _addTracingExtensions(): void {\n  const carrier = getMainCarrier();\n  if (carrier.__SENTRY__) {\n    carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n    if (carrier.__SENTRY__.extensions.startTransaction) {\n      const originalStartTransaction = carrier.__SENTRY__.extensions\n        .startTransaction as StartTransactionFunction;\n\n      /*\n        Overwrites the transaction start and finish to start and finish stall tracking.\n        Preferably instead of overwriting add a callback method for this in the Transaction itself.\n      */\n      const _startTransaction = _patchStartTransaction(\n        originalStartTransaction\n      );\n\n      carrier.__SENTRY__.extensions.startTransaction = _startTransaction;\n    }\n  }\n}\n\ntype StartTransactionFunction = (\n  this: Hub,\n  transactionContext: TransactionContext,\n  customSamplingContext?: CustomSamplingContext\n) => Transaction;\n\n/**\n * Overwrite the startTransaction extension method to start and end stall tracking.\n */\nconst _patchStartTransaction = (\n  originalStartTransaction: StartTransactionFunction\n): StartTransactionFunction => {\n  /**\n   * Method to overwrite with\n   */\n  function _startTransaction(\n    this: Hub,\n    transactionContext: TransactionContext,\n    customSamplingContext?: CustomSamplingContext\n  ): Transaction {\n    const transaction: Transaction = originalStartTransaction.apply(this, [\n      transactionContext,\n      customSamplingContext,\n    ]);\n\n    const reactNativeTracing = getCurrentHub().getIntegration(\n      ReactNativeTracing\n    );\n\n    if (reactNativeTracing) {\n      reactNativeTracing.onTransactionStart(transaction);\n\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      const originalFinish = transaction.finish;\n\n      transaction.finish = (endTimestamp: number | undefined) => {\n        if (reactNativeTracing) {\n          reactNativeTracing.onTransactionFinish(transaction);\n        }\n\n        return originalFinish.apply(transaction, [endTimestamp]);\n      };\n    }\n\n    return transaction;\n  }\n\n  return _startTransaction;\n};\n"]}