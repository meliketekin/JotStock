{"version":3,"file":"touchevents.js","sourceRoot":"","sources":["../../src/js/touchevents.tsx"],"names":[],"mappings":"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","sourcesContent":["import { addBreadcrumb } from '@sentry/core';\nimport { Severity } from '@sentry/types';\nimport { logger } from '@sentry/utils';\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\n\nexport type TouchEventBoundaryProps = {\n  /**\n   * The category assigned to the breadcrumb that is logged by the touch event.\n   */\n  breadcrumbCategory?: string;\n  /**\n   * The type assigned to the breadcrumb that is logged by the touch event.\n   */\n  breadcrumbType?: string;\n  /**\n   * The max number of components to display when logging a touch's component tree.\n   */\n  maxComponentTreeSize?: number;\n  /**\n   * Component name(s) to ignore when logging the touch event. This prevents unhelpful logs such as\n   * \"Touch event within element: View\" where you still can't tell which View it occurred in.\n   */\n  ignoreNames?: Array<string | RegExp>;\n  /**\n   * Deprecated, use ignoreNames instead\n   * @deprecated\n   */\n  ignoredDisplayNames?: Array<string | RegExp>;\n};\n\nconst touchEventStyles = StyleSheet.create({\n  wrapperView: {\n    flex: 1,\n  },\n});\n\nconst DEFAULT_BREADCRUMB_CATEGORY = 'touch';\nconst DEFAULT_BREADCRUMB_TYPE = 'user';\nconst DEFAULT_MAX_COMPONENT_TREE_SIZE = 20;\n\nconst PROP_KEY = 'sentry-label';\n\ninterface ElementInstance {\n  elementType?: {\n    displayName?: string;\n    name?: string;\n  };\n  memoizedProps?: Record<string, unknown>;\n  return?: ElementInstance;\n}\n\n/**\n * Boundary to log breadcrumbs for interaction events.\n */\nclass TouchEventBoundary extends React.Component<TouchEventBoundaryProps> {\n  public static displayName: string = '__Sentry.TouchEventBoundary';\n  public static defaultProps: Partial<TouchEventBoundaryProps> = {\n    breadcrumbCategory: DEFAULT_BREADCRUMB_CATEGORY,\n    breadcrumbType: DEFAULT_BREADCRUMB_TYPE,\n    ignoreNames: [],\n    maxComponentTreeSize: DEFAULT_MAX_COMPONENT_TREE_SIZE,\n  };\n\n  /**\n   *\n   */\n  public render(): React.ReactNode {\n    return (\n      <View\n        style={touchEventStyles.wrapperView}\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        onTouchStart={this._onTouchStart.bind(this) as any}\n      >\n        {this.props.children}\n      </View>\n    );\n  }\n\n  /**\n   * Logs the touch event given the component tree names and a label.\n   */\n  private _logTouchEvent(\n    componentTreeNames: string[],\n    activeLabel?: string\n  ): void {\n    const crumb = {\n      category: this.props.breadcrumbCategory,\n      data: { componentTree: componentTreeNames },\n      level: Severity.Info,\n      message: activeLabel\n        ? `Touch event within element: ${activeLabel}`\n        : 'Touch event within component tree',\n      type: this.props.breadcrumbType,\n    };\n\n    addBreadcrumb(crumb);\n\n    logger.log(`[TouchEvents] ${crumb.message}`);\n  }\n\n  /**\n   * Checks if the name is supposed to be ignored.\n   */\n  private _isNameIgnored(name: string): boolean {\n    let ignoreNames = this.props.ignoreNames || [];\n    // eslint-disable-next-line deprecation/deprecation\n    if (this.props.ignoredDisplayNames) {\n      // This is to make it compatible with prior version.\n      // eslint-disable-next-line deprecation/deprecation\n      ignoreNames = [...ignoreNames, ...this.props.ignoredDisplayNames];\n    }\n\n    return ignoreNames.some(\n      (ignoreName: string | RegExp) =>\n        (typeof ignoreName === 'string' && name === ignoreName) ||\n        (ignoreName instanceof RegExp && name.match(ignoreName))\n    );\n  }\n\n  // Originally was going to clean the names of any HOCs as well but decided that it might hinder debugging effectively. Will leave here in case\n  // private readonly _cleanName = (name: string): string =>\n  //   name.replace(/.*\\(/g, \"\").replace(/\\)/g, \"\");\n\n  /**\n   * Traverses through the component tree when a touch happens and logs it.\n   * @param e\n   */\n  // eslint-disable-next-line complexity\n  private _onTouchStart(e: { _targetInst?: ElementInstance }): void {\n    if (e._targetInst) {\n      let currentInst: ElementInstance | undefined = e._targetInst;\n\n      let activeLabel: string | undefined;\n      let activeDisplayName: string | undefined;\n      const componentTreeNames: string[] = [];\n\n      while (\n        currentInst &&\n        // maxComponentTreeSize will always be defined as we have a defaultProps. But ts needs a check so this is here.\n        this.props.maxComponentTreeSize &&\n        componentTreeNames.length < this.props.maxComponentTreeSize\n      ) {\n        if (\n          // If the loop gets to the boundary itself, break.\n          currentInst.elementType?.displayName ===\n          TouchEventBoundary.displayName\n        ) {\n          break;\n        }\n\n        const props = currentInst.memoizedProps;\n        const label =\n          typeof props?.[PROP_KEY] !== 'undefined'\n            ? `${props[PROP_KEY]}`\n            : undefined;\n\n        // Check the label first\n        if (label && !this._isNameIgnored(label)) {\n          if (!activeLabel) {\n            activeLabel = label;\n          }\n          componentTreeNames.push(label);\n        } else if (\n          typeof props?.accessibilityLabel === 'string' &&\n          !this._isNameIgnored(props.accessibilityLabel)\n        ) {\n          if (!activeLabel) {\n            activeLabel = props.accessibilityLabel;\n          }\n          componentTreeNames.push(props.accessibilityLabel);\n        } else if (currentInst.elementType) {\n          const { elementType } = currentInst;\n\n          if (\n            elementType.displayName &&\n            !this._isNameIgnored(elementType.displayName)\n          ) {\n            // Check display name\n            if (!activeDisplayName) {\n              activeDisplayName = elementType.displayName;\n            }\n            componentTreeNames.push(elementType.displayName);\n          }\n        }\n\n        currentInst = currentInst.return;\n      }\n\n      const finalLabel = activeLabel ?? activeDisplayName;\n\n      if (componentTreeNames.length > 0 || finalLabel) {\n        this._logTouchEvent(componentTreeNames, finalLabel);\n      }\n    }\n  }\n}\n\n/**\n * Convenience Higher-Order-Component for TouchEventBoundary\n * @param WrappedComponent any React Component\n * @param boundaryProps TouchEventBoundaryProps\n */\nconst withTouchEventBoundary = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  InnerComponent: React.ComponentType<any>,\n  boundaryProps?: TouchEventBoundaryProps\n): React.FunctionComponent => {\n  const WrappedComponent: React.FunctionComponent = (props) => (\n    <TouchEventBoundary {...(boundaryProps ?? {})}>\n      <InnerComponent {...props} />\n    </TouchEventBoundary>\n  );\n\n  WrappedComponent.displayName = 'WithTouchEventBoundary';\n\n  return WrappedComponent;\n};\n\nexport { TouchEventBoundary, withTouchEventBoundary };\n"]}